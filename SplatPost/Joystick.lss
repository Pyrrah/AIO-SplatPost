
Joystick.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000012e8  00800100  00000f10  00000fa4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f10  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000021  008013e8  008013e8  0000228c  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0000228c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000022a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000300  00000000  00000000  000022e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000059da  00000000  00000000  000025e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001c4e  00000000  00000000  00007fba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000325c  00000000  00000000  00009c08  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006f0  00000000  00000000  0000ce64  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002197  00000000  00000000  0000d554  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003305  00000000  00000000  0000f6eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000598  00000000  00000000  000129f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	b8 c0       	rjmp	.+368    	; 0x172 <__ctors_end>
   2:	00 00       	nop
   4:	d3 c0       	rjmp	.+422    	; 0x1ac <__bad_interrupt>
   6:	00 00       	nop
   8:	d1 c0       	rjmp	.+418    	; 0x1ac <__bad_interrupt>
   a:	00 00       	nop
   c:	cf c0       	rjmp	.+414    	; 0x1ac <__bad_interrupt>
   e:	00 00       	nop
  10:	cd c0       	rjmp	.+410    	; 0x1ac <__bad_interrupt>
  12:	00 00       	nop
  14:	cb c0       	rjmp	.+406    	; 0x1ac <__bad_interrupt>
  16:	00 00       	nop
  18:	c9 c0       	rjmp	.+402    	; 0x1ac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	c7 c0       	rjmp	.+398    	; 0x1ac <__bad_interrupt>
  1e:	00 00       	nop
  20:	c5 c0       	rjmp	.+394    	; 0x1ac <__bad_interrupt>
  22:	00 00       	nop
  24:	c3 c0       	rjmp	.+390    	; 0x1ac <__bad_interrupt>
  26:	00 00       	nop
  28:	08 c5       	rjmp	.+2576   	; 0xa3a <__vector_10>
  2a:	00 00       	nop
  2c:	bf c0       	rjmp	.+382    	; 0x1ac <__bad_interrupt>
  2e:	00 00       	nop
  30:	bd c0       	rjmp	.+378    	; 0x1ac <__bad_interrupt>
  32:	00 00       	nop
  34:	bb c0       	rjmp	.+374    	; 0x1ac <__bad_interrupt>
  36:	00 00       	nop
  38:	b9 c0       	rjmp	.+370    	; 0x1ac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	b7 c0       	rjmp	.+366    	; 0x1ac <__bad_interrupt>
  3e:	00 00       	nop
  40:	b5 c0       	rjmp	.+362    	; 0x1ac <__bad_interrupt>
  42:	00 00       	nop
  44:	b3 c0       	rjmp	.+358    	; 0x1ac <__bad_interrupt>
  46:	00 00       	nop
  48:	b1 c0       	rjmp	.+354    	; 0x1ac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	af c0       	rjmp	.+350    	; 0x1ac <__bad_interrupt>
  4e:	00 00       	nop
  50:	ad c0       	rjmp	.+346    	; 0x1ac <__bad_interrupt>
  52:	00 00       	nop
  54:	ab c0       	rjmp	.+342    	; 0x1ac <__bad_interrupt>
  56:	00 00       	nop
  58:	a9 c0       	rjmp	.+338    	; 0x1ac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	a7 c0       	rjmp	.+334    	; 0x1ac <__bad_interrupt>
  5e:	00 00       	nop
  60:	a5 c0       	rjmp	.+330    	; 0x1ac <__bad_interrupt>
  62:	00 00       	nop
  64:	a3 c0       	rjmp	.+326    	; 0x1ac <__bad_interrupt>
  66:	00 00       	nop
  68:	a1 c0       	rjmp	.+322    	; 0x1ac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	9f c0       	rjmp	.+318    	; 0x1ac <__bad_interrupt>
  6e:	00 00       	nop
  70:	9d c0       	rjmp	.+314    	; 0x1ac <__bad_interrupt>
  72:	00 00       	nop
  74:	9b c0       	rjmp	.+310    	; 0x1ac <__bad_interrupt>
  76:	00 00       	nop
  78:	99 c0       	rjmp	.+306    	; 0x1ac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	97 c0       	rjmp	.+302    	; 0x1ac <__bad_interrupt>
  7e:	00 00       	nop
  80:	95 c0       	rjmp	.+298    	; 0x1ac <__bad_interrupt>
  82:	00 00       	nop
  84:	93 c0       	rjmp	.+294    	; 0x1ac <__bad_interrupt>
  86:	00 00       	nop
  88:	91 c0       	rjmp	.+290    	; 0x1ac <__bad_interrupt>
  8a:	00 00       	nop
  8c:	8f c0       	rjmp	.+286    	; 0x1ac <__bad_interrupt>
  8e:	00 00       	nop
  90:	8d c0       	rjmp	.+282    	; 0x1ac <__bad_interrupt>
  92:	00 00       	nop
  94:	8b c0       	rjmp	.+278    	; 0x1ac <__bad_interrupt>
  96:	00 00       	nop

00000098 <ProductString>:
  98:	24 03 50 00 4f 00 4b 00 4b 00 45 00 4e 00 20 00     $.P.O.K.K.E.N. .
  a8:	43 00 4f 00 4e 00 54 00 52 00 4f 00 4c 00 4c 00     C.O.N.T.R.O.L.L.
  b8:	45 00 52 00 00 00                                   E.R...

000000be <ManufacturerString>:
  be:	1c 03 48 00 4f 00 52 00 49 00 20 00 43 00 4f 00     ..H.O.R.I. .C.O.
  ce:	2e 00 2c 00 4c 00 54 00 44 00 2e 00 00 00           ..,.L.T.D.....

000000dc <LanguageString>:
  dc:	04 03 09 04                                         ....

000000e0 <ConfigurationDescriptor>:
  e0:	09 02 29 00 01 01 00 80 fa 09 04 00 00 02 03 00     ..).............
  f0:	00 00 09 21 11 01 00 01 22 56 00 07 05 02 03 40     ...!...."V.....@
 100:	00 05 07 05 81 03 40 00 05                          ......@..

00000109 <DeviceDescriptor>:
 109:	12 01 00 02 00 00 00 40 0d 0f 92 00 00 01 01 02     .......@........
 119:	00 01                                               ..

0000011b <JoystickReport>:
 11b:	05 01 09 05 a1 01 15 00 25 01 35 00 45 01 75 01     ........%.5.E.u.
 12b:	95 10 05 09 19 01 29 10 81 02 05 01 25 07 46 3b     ......).....%.F;
 13b:	01 75 04 95 01 65 14 09 39 81 42 65 00 95 01 81     .u...e..9.Be....
 14b:	01 26 ff 00 46 ff 00 09 30 09 31 09 32 09 35 75     .&..F...0.1.2.5u
 15b:	08 95 04 81 02 06 00 ff 09 20 95 01 81 02 0a 21     ......... .....!
 16b:	26 95 08 91 02 c0 00                                &......

00000172 <__ctors_end>:
 172:	11 24       	eor	r1, r1
 174:	1f be       	out	0x3f, r1	; 63
 176:	cf ef       	ldi	r28, 0xFF	; 255
 178:	d0 e2       	ldi	r29, 0x20	; 32
 17a:	de bf       	out	0x3e, r29	; 62
 17c:	cd bf       	out	0x3d, r28	; 61

0000017e <__do_copy_data>:
 17e:	13 e1       	ldi	r17, 0x13	; 19
 180:	a0 e0       	ldi	r26, 0x00	; 0
 182:	b1 e0       	ldi	r27, 0x01	; 1
 184:	e0 e1       	ldi	r30, 0x10	; 16
 186:	ff e0       	ldi	r31, 0x0F	; 15
 188:	00 e0       	ldi	r16, 0x00	; 0
 18a:	0b bf       	out	0x3b, r16	; 59
 18c:	02 c0       	rjmp	.+4      	; 0x192 <__do_copy_data+0x14>
 18e:	07 90       	elpm	r0, Z+
 190:	0d 92       	st	X+, r0
 192:	a8 3e       	cpi	r26, 0xE8	; 232
 194:	b1 07       	cpc	r27, r17
 196:	d9 f7       	brne	.-10     	; 0x18e <__do_copy_data+0x10>

00000198 <__do_clear_bss>:
 198:	24 e1       	ldi	r18, 0x14	; 20
 19a:	a8 ee       	ldi	r26, 0xE8	; 232
 19c:	b3 e1       	ldi	r27, 0x13	; 19
 19e:	01 c0       	rjmp	.+2      	; 0x1a2 <.do_clear_bss_start>

000001a0 <.do_clear_bss_loop>:
 1a0:	1d 92       	st	X+, r1

000001a2 <.do_clear_bss_start>:
 1a2:	a9 30       	cpi	r26, 0x09	; 9
 1a4:	b2 07       	cpc	r27, r18
 1a6:	e1 f7       	brne	.-8      	; 0x1a0 <.do_clear_bss_loop>
 1a8:	90 d1       	rcall	.+800    	; 0x4ca <main>
 1aa:	b0 c6       	rjmp	.+3424   	; 0xf0c <_exit>

000001ac <__bad_interrupt>:
 1ac:	29 cf       	rjmp	.-430    	; 0x0 <__vectors>

000001ae <SetupHardware>:
}

// Configures hardware and peripherals, such as the USB peripherals.
void SetupHardware(void) {
	// We need to disable watchdog if enabled by bootloader/fuses.
	MCUSR &= ~(1 << WDRF);
 1ae:	84 b7       	in	r24, 0x34	; 52
 1b0:	87 7f       	andi	r24, 0xF7	; 247
 1b2:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
 1b4:	0f b6       	in	r0, 0x3f	; 63
 1b6:	f8 94       	cli
 1b8:	a8 95       	wdr
 1ba:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 1be:	88 61       	ori	r24, 0x18	; 24
 1c0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 1c4:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 1c8:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 1ca:	80 e8       	ldi	r24, 0x80	; 128
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	0f b6       	in	r0, 0x3f	; 63
 1d0:	f8 94       	cli
 1d2:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 1d6:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 1da:	0f be       	out	0x3f, r0	; 63
	// We need to disable clock division before initializing the USB hardware.
	clock_prescale_set(clock_div_1);
	// We can then initialize our hardware and peripherals, including the USB stack.

	// Both PORTD and PORTB will be used for handling the buttons and stick.
	DDRD  &= ~0xFF;
 1dc:	8a b1       	in	r24, 0x0a	; 10
 1de:	1a b8       	out	0x0a, r1	; 10
	PORTD |=  0xFF;
 1e0:	8b b1       	in	r24, 0x0b	; 11
 1e2:	8f ef       	ldi	r24, 0xFF	; 255
 1e4:	8b b9       	out	0x0b, r24	; 11

	DDRB  &= ~0xFF;
 1e6:	94 b1       	in	r25, 0x04	; 4
 1e8:	14 b8       	out	0x04, r1	; 4
	PORTB |=  0xFF;
 1ea:	95 b1       	in	r25, 0x05	; 5
 1ec:	85 b9       	out	0x05, r24	; 5
	// The USB stack should be initialized last.
	USB_Init();
 1ee:	0a c4       	rjmp	.+2068   	; 0xa04 <USB_Init>

000001f0 <EVENT_USB_Device_Connect>:
}

// Fired to indicate that the device is enumerating.
void EVENT_USB_Device_Connect(void) {
	// We can indicate that we're enumerating here (via status LEDs, sound, etc.).
}
 1f0:	08 95       	ret

000001f2 <EVENT_USB_Device_Disconnect>:
 1f2:	08 95       	ret

000001f4 <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 1f4:	42 e3       	ldi	r20, 0x32	; 50
 1f6:	60 ec       	ldi	r22, 0xC0	; 192
 1f8:	82 e0       	ldi	r24, 0x02	; 2
 1fa:	3d d3       	rcall	.+1658   	; 0x876 <Endpoint_ConfigureEndpoint_Prv>
 1fc:	42 e3       	ldi	r20, 0x32	; 50
 1fe:	61 ec       	ldi	r22, 0xC1	; 193
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	39 c3       	rjmp	.+1650   	; 0x876 <Endpoint_ConfigureEndpoint_Prv>

00000204 <GetNextReport>:
int reset_count = 0;

bool done_printing = false;

// Prepare the next report for the host.
void GetNextReport(USB_JoystickReport_Input_t* const ReportData) {
 204:	cf 93       	push	r28
 206:	df 93       	push	r29
 208:	fc 01       	movw	r30, r24
	// All of this code here is handled -really poorly-, and should be replaced with something a bit more production-worthy.
	uint16_t buf_button   = 0x00;
	uint8_t  buf_joystick = 0x00;

	/* Clear the report contents */
	memset(ReportData, 0, sizeof(USB_JoystickReport_Input_t));
 20a:	88 e0       	ldi	r24, 0x08	; 8
 20c:	df 01       	movw	r26, r30
 20e:	28 2f       	mov	r18, r24
 210:	1d 92       	st	X+, r1
 212:	2a 95       	dec	r18
 214:	e9 f7       	brne	.-6      	; 0x210 <GetNextReport+0xc>
	if (buf_joystick & 0x10)
		ReportData->LX = 0;
	else if (buf_joystick & 0x20)
		ReportData->LX = 255;
	else
		ReportData->LX = 128;
 216:	90 e8       	ldi	r25, 0x80	; 128
 218:	93 83       	std	Z+3, r25	; 0x03
	if (buf_joystick & 0x80)
		ReportData->LY = 0;
	else if (buf_joystick & 0x40)
		ReportData->LY = 255;
	else
		ReportData->LY = 128;
 21a:	94 83       	std	Z+4, r25	; 0x04
			break;
		case 0x90: // Top-Left
			ReportData->HAT = 0x07;
			break;
		default:
			ReportData->HAT = 0x08;
 21c:	82 83       	std	Z+2, r24	; 0x02
	}
	
	//ReportData->LX = xpos;
	//ReportData->LY = ypos;
	
	if (done_printing) return;
 21e:	80 91 e8 13 	lds	r24, 0x13E8	; 0x8013e8 <__data_end>
 222:	81 11       	cpse	r24, r1
 224:	27 c0       	rjmp	.+78     	; 0x274 <GetNextReport+0x70>
	
	if (reset)
 226:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 22a:	88 23       	and	r24, r24
 22c:	31 f1       	breq	.+76     	; 0x27a <GetNextReport+0x76>
	{
	   reset_count++;
 22e:	80 91 e9 13 	lds	r24, 0x13E9	; 0x8013e9 <reset_count>
 232:	90 91 ea 13 	lds	r25, 0x13EA	; 0x8013ea <reset_count+0x1>
 236:	01 96       	adiw	r24, 0x01	; 1
 238:	90 93 ea 13 	sts	0x13EA, r25	; 0x8013ea <reset_count+0x1>
 23c:	80 93 e9 13 	sts	0x13E9, r24	; 0x8013e9 <reset_count>
	   
	   ReportData->HAT = 0x2;
 240:	22 e0       	ldi	r18, 0x02	; 2
 242:	22 83       	std	Z+2, r18	; 0x02
	   
	   if (reset_count >= 800)
 244:	80 32       	cpi	r24, 0x20	; 32
 246:	93 40       	sbci	r25, 0x03	; 3
 248:	ac f0       	brlt	.+42     	; 0x274 <GetNextReport+0x70>
	   {
	      reset_count = 0;
 24a:	10 92 ea 13 	sts	0x13EA, r1	; 0x8013ea <reset_count+0x1>
 24e:	10 92 e9 13 	sts	0x13E9, r1	; 0x8013e9 <reset_count>
	      reset = false;
 252:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	      
	      xpos = 320;
 256:	80 e4       	ldi	r24, 0x40	; 64
 258:	91 e0       	ldi	r25, 0x01	; 1
 25a:	90 93 ed 13 	sts	0x13ED, r25	; 0x8013ed <xpos+0x1>
 25e:	80 93 ec 13 	sts	0x13EC, r24	; 0x8013ec <xpos>
	      ypos++;
 262:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <ypos>
 266:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <ypos+0x1>
 26a:	01 96       	adiw	r24, 0x01	; 1
 26c:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <ypos+0x1>
 270:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <ypos>
	      
	   if (xpos <= 0 && ypos >= 120-1) done_printing = true;

	   input_count++;
   }
}
 274:	df 91       	pop	r29
 276:	cf 91       	pop	r28
 278:	08 95       	ret
	      ypos++;
	   }
	   return;
	}
	
	input_brakes++;
 27a:	80 91 f0 13 	lds	r24, 0x13F0	; 0x8013f0 <input_brakes>
 27e:	90 91 f1 13 	lds	r25, 0x13F1	; 0x8013f1 <input_brakes+0x1>
 282:	01 96       	adiw	r24, 0x01	; 1
 284:	90 93 f1 13 	sts	0x13F1, r25	; 0x8013f1 <input_brakes+0x1>
 288:	80 93 f0 13 	sts	0x13F0, r24	; 0x8013f0 <input_brakes>
	
	if (input_brakes >= 5)
 28c:	05 97       	sbiw	r24, 0x05	; 5
 28e:	44 f1       	brlt	.+80     	; 0x2e0 <GetNextReport+0xdc>
	{
	   if (reset_request)
 290:	80 91 eb 13 	lds	r24, 0x13EB	; 0x8013eb <reset_request>
 294:	88 23       	and	r24, r24
 296:	51 f0       	breq	.+20     	; 0x2ac <GetNextReport+0xa8>
	   {
	      reset = true;
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	      input_brakes = 0;
 29e:	10 92 f1 13 	sts	0x13F1, r1	; 0x8013f1 <input_brakes+0x1>
 2a2:	10 92 f0 13 	sts	0x13F0, r1	; 0x8013f0 <input_brakes>
	      reset_request = false;;
 2a6:	10 92 eb 13 	sts	0x13EB, r1	; 0x8013eb <reset_request>
	      return;
 2aa:	e4 cf       	rjmp	.-56     	; 0x274 <GetNextReport+0x70>
	   }
	   
	   meme = !meme;
 2ac:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <meme>
 2b0:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <meme+0x1>
 2b4:	21 e0       	ldi	r18, 0x01	; 1
 2b6:	30 e0       	ldi	r19, 0x00	; 0
 2b8:	00 97       	sbiw	r24, 0x00	; 0
 2ba:	11 f0       	breq	.+4      	; 0x2c0 <GetNextReport+0xbc>
 2bc:	30 e0       	ldi	r19, 0x00	; 0
 2be:	20 e0       	ldi	r18, 0x00	; 0
 2c0:	30 93 06 01 	sts	0x0106, r19	; 0x800106 <meme+0x1>
 2c4:	20 93 05 01 	sts	0x0105, r18	; 0x800105 <meme>
	   
	   if (!meme)
 2c8:	89 2b       	or	r24, r25
 2ca:	31 f0       	breq	.+12     	; 0x2d8 <GetNextReport+0xd4>
	      other = !other;
 2cc:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <other>
 2d0:	91 e0       	ldi	r25, 0x01	; 1
 2d2:	89 27       	eor	r24, r25
 2d4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <other>
	      
	   input_brakes = 0;
 2d8:	10 92 f1 13 	sts	0x13F1, r1	; 0x8013f1 <input_brakes+0x1>
 2dc:	10 92 f0 13 	sts	0x13F0, r1	; 0x8013f0 <input_brakes>
 2e0:	80 91 ec 13 	lds	r24, 0x13EC	; 0x8013ec <xpos>
 2e4:	90 91 ed 13 	lds	r25, 0x13ED	; 0x8013ed <xpos+0x1>
	}
	
	if (meme)
 2e8:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <meme>
 2ec:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <meme+0x1>
 2f0:	23 2b       	or	r18, r19
 2f2:	79 f0       	breq	.+30     	; 0x312 <GetNextReport+0x10e>
	{
	   input_count = 0;
 2f4:	10 92 ef 13 	sts	0x13EF, r1	; 0x8013ef <input_count+0x1>
 2f8:	10 92 ee 13 	sts	0x13EE, r1	; 0x8013ee <input_count>
	   
	   if (xpos >= 0)
 2fc:	97 fd       	sbrc	r25, 7
 2fe:	03 c0       	rjmp	.+6      	; 0x306 <GetNextReport+0x102>
	   {
	      ReportData->HAT = 0x6; //go left
 300:	86 e0       	ldi	r24, 0x06	; 6
 302:	82 83       	std	Z+2, r24	; 0x02
 304:	b7 cf       	rjmp	.-146    	; 0x274 <GetNextReport+0x70>
	   }
	   else
	   {
	      ReportData->HAT = 0x4;
 306:	84 e0       	ldi	r24, 0x04	; 4
 308:	82 83       	std	Z+2, r24	; 0x02
	      reset_request = true;
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	80 93 eb 13 	sts	0x13EB, r24	; 0x8013eb <reset_request>
 310:	b1 cf       	rjmp	.-158    	; 0x274 <GetNextReport+0x70>
	   }
	}
	else
	{
	   if (!input_count)
 312:	20 91 ee 13 	lds	r18, 0x13EE	; 0x8013ee <input_count>
 316:	30 91 ef 13 	lds	r19, 0x13EF	; 0x8013ef <input_count+0x1>
 31a:	23 2b       	or	r18, r19
 31c:	39 f4       	brne	.+14     	; 0x32c <GetNextReport+0x128>
	   {
	      if (xpos >= 0)
 31e:	97 fd       	sbrc	r25, 7
 320:	05 c0       	rjmp	.+10     	; 0x32c <GetNextReport+0x128>
	         xpos--;
 322:	01 97       	sbiw	r24, 0x01	; 1
 324:	90 93 ed 13 	sts	0x13ED, r25	; 0x8013ed <xpos+0x1>
 328:	80 93 ec 13 	sts	0x13EC, r24	; 0x8013ec <xpos>
	   }
	   
	   if ((image_data[(xpos / 8)+(ypos*40)] & 1 << (xpos % 8)) && (xpos >= 0))
 32c:	20 91 ec 13 	lds	r18, 0x13EC	; 0x8013ec <xpos>
 330:	30 91 ed 13 	lds	r19, 0x13ED	; 0x8013ed <xpos+0x1>
 334:	40 91 03 01 	lds	r20, 0x0103	; 0x800103 <ypos>
 338:	50 91 04 01 	lds	r21, 0x0104	; 0x800104 <ypos+0x1>
 33c:	c9 01       	movw	r24, r18
 33e:	37 fd       	sbrc	r19, 7
 340:	07 96       	adiw	r24, 0x07	; 7
 342:	63 e0       	ldi	r22, 0x03	; 3
 344:	95 95       	asr	r25
 346:	87 95       	ror	r24
 348:	6a 95       	dec	r22
 34a:	e1 f7       	brne	.-8      	; 0x344 <GetNextReport+0x140>
 34c:	68 e2       	ldi	r22, 0x28	; 40
 34e:	64 9f       	mul	r22, r20
 350:	d0 01       	movw	r26, r0
 352:	65 9f       	mul	r22, r21
 354:	b0 0d       	add	r27, r0
 356:	11 24       	eor	r1, r1
 358:	a9 5d       	subi	r26, 0xD9	; 217
 35a:	be 4f       	sbci	r27, 0xFE	; 254
 35c:	a8 0f       	add	r26, r24
 35e:	b9 1f       	adc	r27, r25
 360:	cc 91       	ld	r28, X
 362:	d0 e0       	ldi	r29, 0x00	; 0
 364:	c9 01       	movw	r24, r18
 366:	68 e0       	ldi	r22, 0x08	; 8
 368:	70 e0       	ldi	r23, 0x00	; 0
 36a:	a9 d5       	rcall	.+2898   	; 0xebe <__divmodhi4>
 36c:	02 c0       	rjmp	.+4      	; 0x372 <GetNextReport+0x16e>
 36e:	d5 95       	asr	r29
 370:	c7 95       	ror	r28
 372:	8a 95       	dec	r24
 374:	e2 f7       	brpl	.-8      	; 0x36e <GetNextReport+0x16a>
 376:	c0 ff       	sbrs	r28, 0
 378:	07 c0       	rjmp	.+14     	; 0x388 <GetNextReport+0x184>
 37a:	37 fd       	sbrc	r19, 7
 37c:	05 c0       	rjmp	.+10     	; 0x388 <GetNextReport+0x184>
	      ReportData->Button |= 0x4;
 37e:	80 81       	ld	r24, Z
 380:	91 81       	ldd	r25, Z+1	; 0x01
 382:	84 60       	ori	r24, 0x04	; 4
 384:	91 83       	std	Z+1, r25	; 0x01
 386:	80 83       	st	Z, r24
	      
	   if (xpos <= 0 && ypos >= 120-1) done_printing = true;
 388:	80 91 ec 13 	lds	r24, 0x13EC	; 0x8013ec <xpos>
 38c:	90 91 ed 13 	lds	r25, 0x13ED	; 0x8013ed <xpos+0x1>
 390:	18 16       	cp	r1, r24
 392:	19 06       	cpc	r1, r25
 394:	54 f0       	brlt	.+20     	; 0x3aa <GetNextReport+0x1a6>
 396:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <ypos>
 39a:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <ypos+0x1>
 39e:	87 37       	cpi	r24, 0x77	; 119
 3a0:	91 05       	cpc	r25, r1
 3a2:	1c f0       	brlt	.+6      	; 0x3aa <GetNextReport+0x1a6>
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	80 93 e8 13 	sts	0x13E8, r24	; 0x8013e8 <__data_end>

	   input_count++;
 3aa:	80 91 ee 13 	lds	r24, 0x13EE	; 0x8013ee <input_count>
 3ae:	90 91 ef 13 	lds	r25, 0x13EF	; 0x8013ef <input_count+0x1>
 3b2:	01 96       	adiw	r24, 0x01	; 1
 3b4:	90 93 ef 13 	sts	0x13EF, r25	; 0x8013ef <input_count+0x1>
 3b8:	80 93 ee 13 	sts	0x13EE, r24	; 0x8013ee <input_count>
 3bc:	5b cf       	rjmp	.-330    	; 0x274 <GetNextReport+0x70>

000003be <EVENT_USB_Device_ControlRequest>:

	// We can read ConfigSuccess to indicate a success or failure at this point.
}

// Process control requests sent to the device from the USB host.
void EVENT_USB_Device_ControlRequest(void) {
 3be:	cf 93       	push	r28
 3c0:	df 93       	push	r29
 3c2:	cd b7       	in	r28, 0x3d	; 61
 3c4:	de b7       	in	r29, 0x3e	; 62
 3c6:	28 97       	sbiw	r28, 0x08	; 8
 3c8:	0f b6       	in	r0, 0x3f	; 63
 3ca:	f8 94       	cli
 3cc:	de bf       	out	0x3e, r29	; 62
 3ce:	0f be       	out	0x3f, r0	; 63
 3d0:	cd bf       	out	0x3d, r28	; 61
	// We can handle two control requests: a GetReport and a SetReport.
	switch (USB_ControlRequest.bRequest)
 3d2:	80 91 02 14 	lds	r24, 0x1402	; 0x801402 <USB_ControlRequest+0x1>
 3d6:	81 30       	cpi	r24, 0x01	; 1
 3d8:	59 f0       	breq	.+22     	; 0x3f0 <EVENT_USB_Device_ControlRequest+0x32>
 3da:	89 30       	cpi	r24, 0x09	; 9
 3dc:	01 f1       	breq	.+64     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
				Endpoint_ClearIN();
			}

			break;
	}
}
 3de:	28 96       	adiw	r28, 0x08	; 8
 3e0:	0f b6       	in	r0, 0x3f	; 63
 3e2:	f8 94       	cli
 3e4:	de bf       	out	0x3e, r29	; 62
 3e6:	0f be       	out	0x3f, r0	; 63
 3e8:	cd bf       	out	0x3d, r28	; 61
 3ea:	df 91       	pop	r29
 3ec:	cf 91       	pop	r28
 3ee:	08 95       	ret
	// We can handle two control requests: a GetReport and a SetReport.
	switch (USB_ControlRequest.bRequest)
	{
		// GetReport is a request for data from the device.
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 3f0:	80 91 01 14 	lds	r24, 0x1401	; 0x801401 <USB_ControlRequest>
 3f4:	81 3a       	cpi	r24, 0xA1	; 161
 3f6:	99 f7       	brne	.-26     	; 0x3de <EVENT_USB_Device_ControlRequest+0x20>
			{
				// We'll create an empty report.
				USB_JoystickReport_Input_t JoystickInputData;
				// We'll then populate this report with what we want to send to the host.
				GetNextReport(&JoystickInputData);
 3f8:	ce 01       	movw	r24, r28
 3fa:	01 96       	adiw	r24, 0x01	; 1
 3fc:	03 df       	rcall	.-506    	; 0x204 <GetNextReport>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 3fe:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 402:	87 7f       	andi	r24, 0xF7	; 247
 404:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				// Since this is a control endpoint, we need to clear up the SETUP packet on this endpoint.
				Endpoint_ClearSETUP();
				// Once populated, we can output this data to the host. We do this by first writing the data to the control stream.
				Endpoint_Write_Control_Stream_LE(&JoystickInputData, sizeof(JoystickInputData));
 408:	68 e0       	ldi	r22, 0x08	; 8
 40a:	70 e0       	ldi	r23, 0x00	; 0
 40c:	ce 01       	movw	r24, r28
 40e:	01 96       	adiw	r24, 0x01	; 1
 410:	3e d1       	rcall	.+636    	; 0x68e <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 412:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 416:	8b 77       	andi	r24, 0x7B	; 123
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 418:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				Endpoint_ClearIN();
			}

			break;
	}
}
 41c:	e0 cf       	rjmp	.-64     	; 0x3de <EVENT_USB_Device_ControlRequest+0x20>
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 41e:	80 91 01 14 	lds	r24, 0x1401	; 0x801401 <USB_ControlRequest>
 422:	81 32       	cpi	r24, 0x21	; 33
 424:	e1 f6       	brne	.-72     	; 0x3de <EVENT_USB_Device_ControlRequest+0x20>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 426:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 42a:	87 7f       	andi	r24, 0xF7	; 247
 42c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				// We'll create a place to store our data received from the host.
				USB_JoystickReport_Output_t JoystickOutputData;
				// Since this is a control endpoint, we need to clear up the SETUP packet on this endpoint.
				Endpoint_ClearSETUP();
				// With our report available, we read data from the control stream.
				Endpoint_Read_Control_Stream_LE(&JoystickOutputData, sizeof(JoystickOutputData));
 430:	67 e0       	ldi	r22, 0x07	; 7
 432:	70 e0       	ldi	r23, 0x00	; 0
 434:	ce 01       	movw	r24, r28
 436:	01 96       	adiw	r24, 0x01	; 1
 438:	87 d1       	rcall	.+782    	; 0x748 <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 43a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 43e:	8e 77       	andi	r24, 0x7E	; 126
 440:	eb cf       	rjmp	.-42     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>

00000442 <HID_Task>:
			break;
	}
}

// Process and deliver data from IN and OUT endpoints.
void HID_Task(void) {
 442:	cf 93       	push	r28
 444:	df 93       	push	r29
 446:	cd b7       	in	r28, 0x3d	; 61
 448:	de b7       	in	r29, 0x3e	; 62
 44a:	28 97       	sbiw	r28, 0x08	; 8
 44c:	0f b6       	in	r0, 0x3f	; 63
 44e:	f8 94       	cli
 450:	de bf       	out	0x3e, r29	; 62
 452:	0f be       	out	0x3f, r0	; 63
 454:	cd bf       	out	0x3d, r28	; 61
	// If the device isn't connected and properly configured, we can't do anything here.
	if (USB_DeviceState != DEVICE_STATE_Configured)
 456:	80 91 00 14 	lds	r24, 0x1400	; 0x801400 <USB_DeviceState>
 45a:	84 30       	cpi	r24, 0x04	; 4
 45c:	69 f5       	brne	.+90     	; 0x4b8 <HID_Task+0x76>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 45e:	82 e0       	ldi	r24, 0x02	; 2
 460:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 464:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	  return;

	// We'll start with the OUT endpoint.
	Endpoint_SelectEndpoint(JOYSTICK_OUT_EPADDR);
	// We'll check to see if we received something on the OUT endpoint.
	if (Endpoint_IsOUTReceived())
 468:	82 ff       	sbrs	r24, 2
 46a:	10 c0       	rjmp	.+32     	; 0x48c <HID_Task+0x4a>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 46c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		// If we did, and the packet has data, we'll react to it.
		if (Endpoint_IsReadWriteAllowed())
 470:	85 ff       	sbrs	r24, 5
 472:	07 c0       	rjmp	.+14     	; 0x482 <HID_Task+0x40>
		{
			// We'll create a place to store our data received from the host.
			USB_JoystickReport_Output_t JoystickOutputData;
			// We'll then take in that data, setting it up in our storage.
			Endpoint_Read_Stream_LE(&JoystickOutputData, sizeof(JoystickOutputData), NULL);
 474:	50 e0       	ldi	r21, 0x00	; 0
 476:	40 e0       	ldi	r20, 0x00	; 0
 478:	67 e0       	ldi	r22, 0x07	; 7
 47a:	70 e0       	ldi	r23, 0x00	; 0
 47c:	ce 01       	movw	r24, r28
 47e:	01 96       	adiw	r24, 0x01	; 1
 480:	b8 d0       	rcall	.+368    	; 0x5f2 <Endpoint_Read_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 482:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 486:	8b 77       	andi	r24, 0x7B	; 123
 488:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 48c:	81 e0       	ldi	r24, 0x01	; 1
 48e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 492:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	}

	// We'll then move on to the IN endpoint.
	Endpoint_SelectEndpoint(JOYSTICK_IN_EPADDR);
	// We first check to see if the host is ready to accept data.
	if (Endpoint_IsINReady())
 496:	80 ff       	sbrs	r24, 0
 498:	0f c0       	rjmp	.+30     	; 0x4b8 <HID_Task+0x76>
	{
		// We'll create an empty report.
		USB_JoystickReport_Input_t JoystickInputData;
		// We'll then populate this report with what we want to send to the host.
		GetNextReport(&JoystickInputData);
 49a:	ce 01       	movw	r24, r28
 49c:	01 96       	adiw	r24, 0x01	; 1
 49e:	b2 de       	rcall	.-668    	; 0x204 <GetNextReport>
		// Once populated, we can output this data to the host. We do this by first writing the data to the control stream.
		Endpoint_Write_Stream_LE(&JoystickInputData, sizeof(JoystickInputData), NULL);
 4a0:	50 e0       	ldi	r21, 0x00	; 0
 4a2:	40 e0       	ldi	r20, 0x00	; 0
 4a4:	68 e0       	ldi	r22, 0x08	; 8
 4a6:	70 e0       	ldi	r23, 0x00	; 0
 4a8:	ce 01       	movw	r24, r28
 4aa:	01 96       	adiw	r24, 0x01	; 1
 4ac:	54 d0       	rcall	.+168    	; 0x556 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 4ae:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 4b2:	8e 77       	andi	r24, 0x7E	; 126
 4b4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		Endpoint_ClearIN();

		/* Clear the report data afterwards */
		// memset(&JoystickInputData, 0, sizeof(JoystickInputData));
	}
}
 4b8:	28 96       	adiw	r28, 0x08	; 8
 4ba:	0f b6       	in	r0, 0x3f	; 63
 4bc:	f8 94       	cli
 4be:	de bf       	out	0x3e, r29	; 62
 4c0:	0f be       	out	0x3f, r0	; 63
 4c2:	cd bf       	out	0x3d, r28	; 61
 4c4:	df 91       	pop	r29
 4c6:	cf 91       	pop	r28
 4c8:	08 95       	ret

000004ca <main>:
#define PIND_DEBOUNCED ((bd_state >> 8) & 0xFF) 

// Main entry point.
int main(void) {
	// We'll start by performing hardware and peripheral setup.
	SetupHardware();
 4ca:	71 de       	rcall	.-798    	; 0x1ae <SetupHardware>
	GlobalInterruptEnable();
	// Once that's done, we'll enter an infinite loop.
	for (;;)
	{
		// We need to run our task to process and deliver data for our IN and OUT endpoints.
		HID_Task();
 4cc:	78 94       	sei
		// We also need to run the main USB management task.
		USB_USBTask();
 4ce:	b9 df       	rcall	.-142    	; 0x442 <HID_Task>
 4d0:	db d4       	rcall	.+2486   	; 0xe88 <USB_USBTask>
 4d2:	fd cf       	rjmp	.-6      	; 0x4ce <main+0x4>

000004d4 <CALLBACK_USB_GetDescriptor>:
uint16_t CALLBACK_USB_GetDescriptor(
	const uint16_t wValue,
	const uint16_t wIndex,
	const void** const DescriptorAddress
) {
	const uint8_t  DescriptorType   = (wValue >> 8);
 4d4:	29 2f       	mov	r18, r25
 4d6:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 4d8:	23 30       	cpi	r18, 0x03	; 3
 4da:	31 05       	cpc	r19, r1
 4dc:	21 f1       	breq	.+72     	; 0x526 <CALLBACK_USB_GetDescriptor+0x52>
 4de:	58 f4       	brcc	.+22     	; 0x4f6 <CALLBACK_USB_GetDescriptor+0x22>
 4e0:	21 30       	cpi	r18, 0x01	; 1
 4e2:	31 05       	cpc	r19, r1
 4e4:	99 f0       	breq	.+38     	; 0x50c <CALLBACK_USB_GetDescriptor+0x38>
 4e6:	22 30       	cpi	r18, 0x02	; 2
 4e8:	31 05       	cpc	r19, r1
 4ea:	c1 f0       	breq	.+48     	; 0x51c <CALLBACK_USB_GetDescriptor+0x48>
) {
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	80 e0       	ldi	r24, 0x00	; 0
	const void** const DescriptorAddress
) {
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
 4f0:	30 e0       	ldi	r19, 0x00	; 0
 4f2:	20 e0       	ldi	r18, 0x00	; 0
 4f4:	0f c0       	rjmp	.+30     	; 0x514 <CALLBACK_USB_GetDescriptor+0x40>
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 4f6:	21 32       	cpi	r18, 0x21	; 33
 4f8:	31 05       	cpc	r19, r1
 4fa:	41 f1       	breq	.+80     	; 0x54c <CALLBACK_USB_GetDescriptor+0x78>
 4fc:	22 32       	cpi	r18, 0x22	; 34
 4fe:	31 05       	cpc	r19, r1
 500:	a9 f7       	brne	.-22     	; 0x4ec <CALLBACK_USB_GetDescriptor+0x18>
			Address = &ConfigurationDescriptor.HID_JoystickHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case DTYPE_Report:
			Address = &JoystickReport;
			Size    = sizeof(JoystickReport);
 502:	86 e5       	ldi	r24, 0x56	; 86
 504:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_JoystickHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case DTYPE_Report:
			Address = &JoystickReport;
 506:	2b e1       	ldi	r18, 0x1B	; 27
 508:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(JoystickReport);
			break;
 50a:	04 c0       	rjmp	.+8      	; 0x514 <CALLBACK_USB_GetDescriptor+0x40>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
 50c:	82 e1       	ldi	r24, 0x12	; 18
 50e:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
 510:	29 e0       	ldi	r18, 0x09	; 9
 512:	31 e0       	ldi	r19, 0x01	; 1
			Address = &JoystickReport;
			Size    = sizeof(JoystickReport);
			break;
	}

	*DescriptorAddress = Address;
 514:	fa 01       	movw	r30, r20
 516:	31 83       	std	Z+1, r19	; 0x01
 518:	20 83       	st	Z, r18
	return Size;
}
 51a:	08 95       	ret
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
 51c:	89 e2       	ldi	r24, 0x29	; 41
 51e:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
 520:	20 ee       	ldi	r18, 0xE0	; 224
 522:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
 524:	f7 cf       	rjmp	.-18     	; 0x514 <CALLBACK_USB_GetDescriptor+0x40>
		case DTYPE_String:
			switch (DescriptorNumber)
 526:	99 27       	eor	r25, r25
 528:	81 30       	cpi	r24, 0x01	; 1
 52a:	91 05       	cpc	r25, r1
 52c:	61 f0       	breq	.+24     	; 0x546 <CALLBACK_USB_GetDescriptor+0x72>
 52e:	28 f0       	brcs	.+10     	; 0x53a <CALLBACK_USB_GetDescriptor+0x66>
 530:	02 97       	sbiw	r24, 0x02	; 2
 532:	e1 f6       	brne	.-72     	; 0x4ec <CALLBACK_USB_GetDescriptor+0x18>
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 534:	e8 e9       	ldi	r30, 0x98	; 152
 536:	f0 e0       	ldi	r31, 0x00	; 0
 538:	02 c0       	rjmp	.+4      	; 0x53e <CALLBACK_USB_GetDescriptor+0x6a>
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 53a:	ec ed       	ldi	r30, 0xDC	; 220
 53c:	f0 e0       	ldi	r31, 0x00	; 0
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 53e:	84 91       	lpm	r24, Z
 540:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
 542:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
 544:	e7 cf       	rjmp	.-50     	; 0x514 <CALLBACK_USB_GetDescriptor+0x40>
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 546:	ee eb       	ldi	r30, 0xBE	; 190
 548:	f0 e0       	ldi	r31, 0x00	; 0
 54a:	f9 cf       	rjmp	.-14     	; 0x53e <CALLBACK_USB_GetDescriptor+0x6a>
			}

			break;
		case DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_JoystickHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
 54c:	89 e0       	ldi	r24, 0x09	; 9
 54e:	90 e0       	ldi	r25, 0x00	; 0
					break;
			}

			break;
		case DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_JoystickHID;
 550:	22 ef       	ldi	r18, 0xF2	; 242
 552:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
 554:	df cf       	rjmp	.-66     	; 0x514 <CALLBACK_USB_GetDescriptor+0x40>

00000556 <Endpoint_Write_Stream_LE>:
	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 556:	af 92       	push	r10
 558:	bf 92       	push	r11
 55a:	cf 92       	push	r12
 55c:	df 92       	push	r13
 55e:	ff 92       	push	r15
 560:	0f 93       	push	r16
 562:	1f 93       	push	r17
 564:	cf 93       	push	r28
 566:	df 93       	push	r29
 568:	6c 01       	movw	r12, r24
 56a:	eb 01       	movw	r28, r22
 56c:	8a 01       	movw	r16, r20
 56e:	d6 d1       	rcall	.+940    	; 0x91c <Endpoint_WaitUntilReady>
 570:	f8 2e       	mov	r15, r24
 572:	81 11       	cpse	r24, r1
 574:	24 c0       	rjmp	.+72     	; 0x5be <Endpoint_Write_Stream_LE+0x68>
 576:	01 15       	cp	r16, r1
 578:	11 05       	cpc	r17, r1
 57a:	39 f0       	breq	.+14     	; 0x58a <Endpoint_Write_Stream_LE+0x34>
 57c:	f8 01       	movw	r30, r16
 57e:	80 81       	ld	r24, Z
 580:	91 81       	ldd	r25, Z+1	; 0x01
 582:	c8 1b       	sub	r28, r24
 584:	d9 0b       	sbc	r29, r25
 586:	c8 0e       	add	r12, r24
 588:	d9 1e       	adc	r13, r25
 58a:	b1 2c       	mov	r11, r1
 58c:	a1 2c       	mov	r10, r1
 58e:	20 97       	sbiw	r28, 0x00	; 0
 590:	b1 f0       	breq	.+44     	; 0x5be <Endpoint_Write_Stream_LE+0x68>
 592:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 596:	85 fd       	sbrc	r24, 5
 598:	22 c0       	rjmp	.+68     	; 0x5de <Endpoint_Write_Stream_LE+0x88>
 59a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 59e:	8e 77       	andi	r24, 0x7E	; 126
 5a0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 5a4:	71 d4       	rcall	.+2274   	; 0xe88 <USB_USBTask>
 5a6:	01 15       	cp	r16, r1
 5a8:	11 05       	cpc	r17, r1
 5aa:	a1 f0       	breq	.+40     	; 0x5d4 <Endpoint_Write_Stream_LE+0x7e>
 5ac:	f8 01       	movw	r30, r16
 5ae:	80 81       	ld	r24, Z
 5b0:	91 81       	ldd	r25, Z+1	; 0x01
 5b2:	a8 0e       	add	r10, r24
 5b4:	b9 1e       	adc	r11, r25
 5b6:	b1 82       	std	Z+1, r11	; 0x01
 5b8:	a0 82       	st	Z, r10
 5ba:	85 e0       	ldi	r24, 0x05	; 5
 5bc:	f8 2e       	mov	r15, r24
 5be:	8f 2d       	mov	r24, r15
 5c0:	df 91       	pop	r29
 5c2:	cf 91       	pop	r28
 5c4:	1f 91       	pop	r17
 5c6:	0f 91       	pop	r16
 5c8:	ff 90       	pop	r15
 5ca:	df 90       	pop	r13
 5cc:	cf 90       	pop	r12
 5ce:	bf 90       	pop	r11
 5d0:	af 90       	pop	r10
 5d2:	08 95       	ret
 5d4:	a3 d1       	rcall	.+838    	; 0x91c <Endpoint_WaitUntilReady>
 5d6:	88 23       	and	r24, r24
 5d8:	d1 f2       	breq	.-76     	; 0x58e <Endpoint_Write_Stream_LE+0x38>
 5da:	f8 2e       	mov	r15, r24
 5dc:	f0 cf       	rjmp	.-32     	; 0x5be <Endpoint_Write_Stream_LE+0x68>
 5de:	f6 01       	movw	r30, r12
 5e0:	81 91       	ld	r24, Z+
 5e2:	6f 01       	movw	r12, r30
 5e4:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 5e8:	21 97       	sbiw	r28, 0x01	; 1
 5ea:	ff ef       	ldi	r31, 0xFF	; 255
 5ec:	af 1a       	sub	r10, r31
 5ee:	bf 0a       	sbc	r11, r31
 5f0:	ce cf       	rjmp	.-100    	; 0x58e <Endpoint_Write_Stream_LE+0x38>

000005f2 <Endpoint_Read_Stream_LE>:
 5f2:	af 92       	push	r10
 5f4:	bf 92       	push	r11
 5f6:	cf 92       	push	r12
 5f8:	df 92       	push	r13
 5fa:	ff 92       	push	r15
 5fc:	0f 93       	push	r16
 5fe:	1f 93       	push	r17
 600:	cf 93       	push	r28
 602:	df 93       	push	r29
 604:	6c 01       	movw	r12, r24
 606:	eb 01       	movw	r28, r22
 608:	8a 01       	movw	r16, r20
 60a:	88 d1       	rcall	.+784    	; 0x91c <Endpoint_WaitUntilReady>
 60c:	f8 2e       	mov	r15, r24
 60e:	81 11       	cpse	r24, r1
 610:	24 c0       	rjmp	.+72     	; 0x65a <Endpoint_Read_Stream_LE+0x68>
 612:	01 15       	cp	r16, r1
 614:	11 05       	cpc	r17, r1
 616:	39 f0       	breq	.+14     	; 0x626 <Endpoint_Read_Stream_LE+0x34>
 618:	f8 01       	movw	r30, r16
 61a:	80 81       	ld	r24, Z
 61c:	91 81       	ldd	r25, Z+1	; 0x01
 61e:	c8 1b       	sub	r28, r24
 620:	d9 0b       	sbc	r29, r25
 622:	c8 0e       	add	r12, r24
 624:	d9 1e       	adc	r13, r25
 626:	b1 2c       	mov	r11, r1
 628:	a1 2c       	mov	r10, r1
 62a:	20 97       	sbiw	r28, 0x00	; 0
 62c:	b1 f0       	breq	.+44     	; 0x65a <Endpoint_Read_Stream_LE+0x68>
 62e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 632:	85 fd       	sbrc	r24, 5
 634:	22 c0       	rjmp	.+68     	; 0x67a <Endpoint_Read_Stream_LE+0x88>
 636:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 63a:	8b 77       	andi	r24, 0x7B	; 123
 63c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 640:	23 d4       	rcall	.+2118   	; 0xe88 <USB_USBTask>
 642:	01 15       	cp	r16, r1
 644:	11 05       	cpc	r17, r1
 646:	a1 f0       	breq	.+40     	; 0x670 <Endpoint_Read_Stream_LE+0x7e>
 648:	f8 01       	movw	r30, r16
 64a:	80 81       	ld	r24, Z
 64c:	91 81       	ldd	r25, Z+1	; 0x01
 64e:	a8 0e       	add	r10, r24
 650:	b9 1e       	adc	r11, r25
 652:	b1 82       	std	Z+1, r11	; 0x01
 654:	a0 82       	st	Z, r10
 656:	85 e0       	ldi	r24, 0x05	; 5
 658:	f8 2e       	mov	r15, r24
 65a:	8f 2d       	mov	r24, r15
 65c:	df 91       	pop	r29
 65e:	cf 91       	pop	r28
 660:	1f 91       	pop	r17
 662:	0f 91       	pop	r16
 664:	ff 90       	pop	r15
 666:	df 90       	pop	r13
 668:	cf 90       	pop	r12
 66a:	bf 90       	pop	r11
 66c:	af 90       	pop	r10
 66e:	08 95       	ret
 670:	55 d1       	rcall	.+682    	; 0x91c <Endpoint_WaitUntilReady>
 672:	88 23       	and	r24, r24
 674:	d1 f2       	breq	.-76     	; 0x62a <Endpoint_Read_Stream_LE+0x38>
 676:	f8 2e       	mov	r15, r24
 678:	f0 cf       	rjmp	.-32     	; 0x65a <Endpoint_Read_Stream_LE+0x68>
 67a:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 67e:	f6 01       	movw	r30, r12
 680:	81 93       	st	Z+, r24
 682:	6f 01       	movw	r12, r30
 684:	21 97       	sbiw	r28, 0x01	; 1
 686:	ff ef       	ldi	r31, 0xFF	; 255
 688:	af 1a       	sub	r10, r31
 68a:	bf 0a       	sbc	r11, r31
 68c:	ce cf       	rjmp	.-100    	; 0x62a <Endpoint_Read_Stream_LE+0x38>

0000068e <Endpoint_Write_Control_Stream_LE>:
 68e:	fc 01       	movw	r30, r24
 690:	80 91 07 14 	lds	r24, 0x1407	; 0x801407 <USB_ControlRequest+0x6>
 694:	90 91 08 14 	lds	r25, 0x1408	; 0x801408 <USB_ControlRequest+0x7>
 698:	86 17       	cp	r24, r22
 69a:	97 07       	cpc	r25, r23
 69c:	a0 f0       	brcs	.+40     	; 0x6c6 <Endpoint_Write_Control_Stream_LE+0x38>
 69e:	61 15       	cp	r22, r1
 6a0:	71 05       	cpc	r23, r1
 6a2:	29 f4       	brne	.+10     	; 0x6ae <Endpoint_Write_Control_Stream_LE+0x20>
 6a4:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 6a8:	9e 77       	andi	r25, 0x7E	; 126
 6aa:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 6ae:	90 e0       	ldi	r25, 0x00	; 0
 6b0:	61 15       	cp	r22, r1
 6b2:	71 05       	cpc	r23, r1
 6b4:	51 f4       	brne	.+20     	; 0x6ca <Endpoint_Write_Control_Stream_LE+0x3c>
 6b6:	91 11       	cpse	r25, r1
 6b8:	08 c0       	rjmp	.+16     	; 0x6ca <Endpoint_Write_Control_Stream_LE+0x3c>
 6ba:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 6be:	82 ff       	sbrs	r24, 2
 6c0:	33 c0       	rjmp	.+102    	; 0x728 <Endpoint_Write_Control_Stream_LE+0x9a>
 6c2:	80 e0       	ldi	r24, 0x00	; 0
 6c4:	08 95       	ret
 6c6:	bc 01       	movw	r22, r24
 6c8:	f2 cf       	rjmp	.-28     	; 0x6ae <Endpoint_Write_Control_Stream_LE+0x20>
 6ca:	80 91 00 14 	lds	r24, 0x1400	; 0x801400 <USB_DeviceState>
 6ce:	88 23       	and	r24, r24
 6d0:	b9 f1       	breq	.+110    	; 0x740 <Endpoint_Write_Control_Stream_LE+0xb2>
 6d2:	85 30       	cpi	r24, 0x05	; 5
 6d4:	b9 f1       	breq	.+110    	; 0x744 <Endpoint_Write_Control_Stream_LE+0xb6>
 6d6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 6da:	83 fd       	sbrc	r24, 3
 6dc:	2f c0       	rjmp	.+94     	; 0x73c <Endpoint_Write_Control_Stream_LE+0xae>
 6de:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 6e2:	82 fd       	sbrc	r24, 2
 6e4:	ea cf       	rjmp	.-44     	; 0x6ba <Endpoint_Write_Control_Stream_LE+0x2c>
 6e6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 6ea:	80 ff       	sbrs	r24, 0
 6ec:	e1 cf       	rjmp	.-62     	; 0x6b0 <Endpoint_Write_Control_Stream_LE+0x22>
 6ee:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 6f2:	30 91 f3 00 	lds	r19, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 6f6:	61 15       	cp	r22, r1
 6f8:	71 05       	cpc	r23, r1
 6fa:	19 f0       	breq	.+6      	; 0x702 <Endpoint_Write_Control_Stream_LE+0x74>
 6fc:	20 34       	cpi	r18, 0x40	; 64
 6fe:	31 05       	cpc	r19, r1
 700:	58 f0       	brcs	.+22     	; 0x718 <Endpoint_Write_Control_Stream_LE+0x8a>
 702:	91 e0       	ldi	r25, 0x01	; 1
 704:	20 34       	cpi	r18, 0x40	; 64
 706:	31 05       	cpc	r19, r1
 708:	09 f0       	breq	.+2      	; 0x70c <Endpoint_Write_Control_Stream_LE+0x7e>
 70a:	90 e0       	ldi	r25, 0x00	; 0
 70c:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 710:	2e 77       	andi	r18, 0x7E	; 126
 712:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 716:	cc cf       	rjmp	.-104    	; 0x6b0 <Endpoint_Write_Control_Stream_LE+0x22>
 718:	81 91       	ld	r24, Z+
 71a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 71e:	61 50       	subi	r22, 0x01	; 1
 720:	71 09       	sbc	r23, r1
 722:	2f 5f       	subi	r18, 0xFF	; 255
 724:	3f 4f       	sbci	r19, 0xFF	; 255
 726:	e7 cf       	rjmp	.-50     	; 0x6f6 <Endpoint_Write_Control_Stream_LE+0x68>
 728:	80 91 00 14 	lds	r24, 0x1400	; 0x801400 <USB_DeviceState>
 72c:	88 23       	and	r24, r24
 72e:	41 f0       	breq	.+16     	; 0x740 <Endpoint_Write_Control_Stream_LE+0xb2>
 730:	85 30       	cpi	r24, 0x05	; 5
 732:	41 f0       	breq	.+16     	; 0x744 <Endpoint_Write_Control_Stream_LE+0xb6>
 734:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 738:	83 ff       	sbrs	r24, 3
 73a:	bf cf       	rjmp	.-130    	; 0x6ba <Endpoint_Write_Control_Stream_LE+0x2c>
 73c:	81 e0       	ldi	r24, 0x01	; 1
 73e:	08 95       	ret
 740:	82 e0       	ldi	r24, 0x02	; 2
 742:	08 95       	ret
 744:	83 e0       	ldi	r24, 0x03	; 3
 746:	08 95       	ret

00000748 <Endpoint_Read_Control_Stream_LE>:
 748:	fc 01       	movw	r30, r24
 74a:	61 15       	cp	r22, r1
 74c:	71 05       	cpc	r23, r1
 74e:	29 f4       	brne	.+10     	; 0x75a <Endpoint_Read_Control_Stream_LE+0x12>
 750:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 754:	9b 77       	andi	r25, 0x7B	; 123
 756:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 75a:	61 15       	cp	r22, r1
 75c:	71 05       	cpc	r23, r1
 75e:	31 f4       	brne	.+12     	; 0x76c <Endpoint_Read_Control_Stream_LE+0x24>
 760:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 764:	80 ff       	sbrs	r24, 0
 766:	1d c0       	rjmp	.+58     	; 0x7a2 <Endpoint_Read_Control_Stream_LE+0x5a>
 768:	80 e0       	ldi	r24, 0x00	; 0
 76a:	08 95       	ret
 76c:	80 91 00 14 	lds	r24, 0x1400	; 0x801400 <USB_DeviceState>
 770:	88 23       	and	r24, r24
 772:	09 f1       	breq	.+66     	; 0x7b6 <Endpoint_Read_Control_Stream_LE+0x6e>
 774:	85 30       	cpi	r24, 0x05	; 5
 776:	d9 f0       	breq	.+54     	; 0x7ae <Endpoint_Read_Control_Stream_LE+0x66>
 778:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 77c:	83 fd       	sbrc	r24, 3
 77e:	19 c0       	rjmp	.+50     	; 0x7b2 <Endpoint_Read_Control_Stream_LE+0x6a>
 780:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 784:	82 ff       	sbrs	r24, 2
 786:	e9 cf       	rjmp	.-46     	; 0x75a <Endpoint_Read_Control_Stream_LE+0x12>
 788:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 78c:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 790:	89 2b       	or	r24, r25
 792:	f1 f2       	breq	.-68     	; 0x750 <Endpoint_Read_Control_Stream_LE+0x8>
 794:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 798:	81 93       	st	Z+, r24
 79a:	61 50       	subi	r22, 0x01	; 1
 79c:	71 09       	sbc	r23, r1
 79e:	a1 f7       	brne	.-24     	; 0x788 <Endpoint_Read_Control_Stream_LE+0x40>
 7a0:	d7 cf       	rjmp	.-82     	; 0x750 <Endpoint_Read_Control_Stream_LE+0x8>
 7a2:	80 91 00 14 	lds	r24, 0x1400	; 0x801400 <USB_DeviceState>
 7a6:	88 23       	and	r24, r24
 7a8:	31 f0       	breq	.+12     	; 0x7b6 <Endpoint_Read_Control_Stream_LE+0x6e>
 7aa:	85 30       	cpi	r24, 0x05	; 5
 7ac:	c9 f6       	brne	.-78     	; 0x760 <Endpoint_Read_Control_Stream_LE+0x18>
 7ae:	83 e0       	ldi	r24, 0x03	; 3
 7b0:	08 95       	ret
 7b2:	81 e0       	ldi	r24, 0x01	; 1
 7b4:	08 95       	ret
 7b6:	82 e0       	ldi	r24, 0x02	; 2
 7b8:	08 95       	ret

000007ba <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
 7ba:	fc 01       	movw	r30, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 7bc:	80 91 07 14 	lds	r24, 0x1407	; 0x801407 <USB_ControlRequest+0x6>
 7c0:	90 91 08 14 	lds	r25, 0x1408	; 0x801408 <USB_ControlRequest+0x7>
 7c4:	86 17       	cp	r24, r22
 7c6:	97 07       	cpc	r25, r23
 7c8:	a0 f0       	brcs	.+40     	; 0x7f2 <Endpoint_Write_Control_PStream_LE+0x38>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 7ca:	61 15       	cp	r22, r1
 7cc:	71 05       	cpc	r23, r1
 7ce:	29 f4       	brne	.+10     	; 0x7da <Endpoint_Write_Control_PStream_LE+0x20>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 7d0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 7d4:	8e 77       	andi	r24, 0x7E	; 126
 7d6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 7da:	90 e0       	ldi	r25, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 7dc:	61 15       	cp	r22, r1
 7de:	71 05       	cpc	r23, r1
 7e0:	51 f4       	brne	.+20     	; 0x7f6 <Endpoint_Write_Control_PStream_LE+0x3c>
 7e2:	91 11       	cpse	r25, r1
 7e4:	08 c0       	rjmp	.+16     	; 0x7f6 <Endpoint_Write_Control_PStream_LE+0x3c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 7e6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 7ea:	82 ff       	sbrs	r24, 2
 7ec:	34 c0       	rjmp	.+104    	; 0x856 <Endpoint_Write_Control_PStream_LE+0x9c>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 7ee:	80 e0       	ldi	r24, 0x00	; 0
 7f0:	08 95       	ret
 7f2:	bc 01       	movw	r22, r24
 7f4:	f2 cf       	rjmp	.-28     	; 0x7da <Endpoint_Write_Control_PStream_LE+0x20>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 7f6:	80 91 00 14 	lds	r24, 0x1400	; 0x801400 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 7fa:	88 23       	and	r24, r24
 7fc:	c1 f1       	breq	.+112    	; 0x86e <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 7fe:	85 30       	cpi	r24, 0x05	; 5
 800:	c1 f1       	breq	.+112    	; 0x872 <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 802:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 806:	83 fd       	sbrc	r24, 3
 808:	30 c0       	rjmp	.+96     	; 0x86a <Endpoint_Write_Control_PStream_LE+0xb0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 80a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 80e:	82 fd       	sbrc	r24, 2
 810:	ea cf       	rjmp	.-44     	; 0x7e6 <Endpoint_Write_Control_PStream_LE+0x2c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 812:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  break;

		if (Endpoint_IsINReady())
 816:	80 ff       	sbrs	r24, 0
 818:	e1 cf       	rjmp	.-62     	; 0x7dc <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
 81a:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 81e:	30 91 f3 00 	lds	r19, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 822:	61 15       	cp	r22, r1
 824:	71 05       	cpc	r23, r1
 826:	19 f0       	breq	.+6      	; 0x82e <Endpoint_Write_Control_PStream_LE+0x74>
 828:	20 34       	cpi	r18, 0x40	; 64
 82a:	31 05       	cpc	r19, r1
 82c:	58 f0       	brcs	.+22     	; 0x844 <Endpoint_Write_Control_PStream_LE+0x8a>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 82e:	91 e0       	ldi	r25, 0x01	; 1
 830:	20 34       	cpi	r18, 0x40	; 64
 832:	31 05       	cpc	r19, r1
 834:	09 f0       	breq	.+2      	; 0x838 <Endpoint_Write_Control_PStream_LE+0x7e>
 836:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 838:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 83c:	8e 77       	andi	r24, 0x7E	; 126
 83e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 842:	cc cf       	rjmp	.-104    	; 0x7dc <Endpoint_Write_Control_PStream_LE+0x22>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 844:	84 91       	lpm	r24, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 846:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 84a:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 84c:	61 50       	subi	r22, 0x01	; 1
 84e:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
 850:	2f 5f       	subi	r18, 0xFF	; 255
 852:	3f 4f       	sbci	r19, 0xFF	; 255
 854:	e6 cf       	rjmp	.-52     	; 0x822 <Endpoint_Write_Control_PStream_LE+0x68>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 856:	80 91 00 14 	lds	r24, 0x1400	; 0x801400 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 85a:	88 23       	and	r24, r24
 85c:	41 f0       	breq	.+16     	; 0x86e <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 85e:	85 30       	cpi	r24, 0x05	; 5
 860:	41 f0       	breq	.+16     	; 0x872 <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 862:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 866:	83 ff       	sbrs	r24, 3
 868:	be cf       	rjmp	.-132    	; 0x7e6 <Endpoint_Write_Control_PStream_LE+0x2c>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 86a:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 86c:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 86e:	82 e0       	ldi	r24, 0x02	; 2
 870:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 872:	83 e0       	ldi	r24, 0x03	; 3
 874:	08 95       	ret

00000876 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
 876:	98 2f       	mov	r25, r24
 878:	97 30       	cpi	r25, 0x07	; 7
 87a:	28 f0       	brcs	.+10     	; 0x886 <Endpoint_ConfigureEndpoint_Prv+0x10>
 87c:	8f 70       	andi	r24, 0x0F	; 15
 87e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 882:	81 e0       	ldi	r24, 0x01	; 1
 884:	08 95       	ret
 886:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 88a:	24 2f       	mov	r18, r20
 88c:	76 2f       	mov	r23, r22
 88e:	50 e0       	ldi	r21, 0x00	; 0
 890:	98 17       	cp	r25, r24
 892:	31 f0       	breq	.+12     	; 0x8a0 <Endpoint_ConfigureEndpoint_Prv+0x2a>
 894:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 898:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 89c:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 8a0:	21 fd       	sbrc	r18, 1
 8a2:	02 c0       	rjmp	.+4      	; 0x8a8 <Endpoint_ConfigureEndpoint_Prv+0x32>
 8a4:	9f 5f       	subi	r25, 0xFF	; 255
 8a6:	e8 cf       	rjmp	.-48     	; 0x878 <Endpoint_ConfigureEndpoint_Prv+0x2>
 8a8:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 8ac:	3e 7f       	andi	r19, 0xFE	; 254
 8ae:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 8b2:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 8b6:	3d 7f       	andi	r19, 0xFD	; 253
 8b8:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 8bc:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 8c0:	31 60       	ori	r19, 0x01	; 1
 8c2:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 8c6:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 8ca:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 8ce:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 8d2:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
 8d6:	27 fd       	sbrc	r18, 7
 8d8:	e5 cf       	rjmp	.-54     	; 0x8a4 <Endpoint_ConfigureEndpoint_Prv+0x2e>
 8da:	80 e0       	ldi	r24, 0x00	; 0
 8dc:	08 95       	ret

000008de <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 8de:	80 91 01 14 	lds	r24, 0x1401	; 0x801401 <USB_ControlRequest>
 8e2:	87 ff       	sbrs	r24, 7
 8e4:	13 c0       	rjmp	.+38     	; 0x90c <Endpoint_ClearStatusStage+0x2e>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 8e6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
 8ea:	82 ff       	sbrs	r24, 2
 8ec:	06 c0       	rjmp	.+12     	; 0x8fa <Endpoint_ClearStatusStage+0x1c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 8ee:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 8f2:	8b 77       	andi	r24, 0x7B	; 123
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 8f4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 8f8:	04 c0       	rjmp	.+8      	; 0x902 <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 8fa:	80 91 00 14 	lds	r24, 0x1400	; 0x801400 <USB_DeviceState>
 8fe:	81 11       	cpse	r24, r1
 900:	f2 cf       	rjmp	.-28     	; 0x8e6 <Endpoint_ClearStatusStage+0x8>
			  return;
		}

		Endpoint_ClearIN();
	}
}
 902:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 904:	80 91 00 14 	lds	r24, 0x1400	; 0x801400 <USB_DeviceState>
 908:	88 23       	and	r24, r24
 90a:	d9 f3       	breq	.-10     	; 0x902 <Endpoint_ClearStatusStage+0x24>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 90c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 910:	80 ff       	sbrs	r24, 0
 912:	f8 cf       	rjmp	.-16     	; 0x904 <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 914:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 918:	8e 77       	andi	r24, 0x7E	; 126
 91a:	ec cf       	rjmp	.-40     	; 0x8f4 <Endpoint_ClearStatusStage+0x16>

0000091c <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 91c:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 920:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
 924:	85 e6       	ldi	r24, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 926:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 92a:	90 ff       	sbrs	r25, 0
 92c:	06 c0       	rjmp	.+12     	; 0x93a <Endpoint_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 92e:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
 932:	90 ff       	sbrs	r25, 0
 934:	06 c0       	rjmp	.+12     	; 0x942 <Endpoint_WaitUntilReady+0x26>
			  return ENDPOINT_READYWAIT_NoError;
 936:	80 e0       	ldi	r24, 0x00	; 0
 938:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 93a:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 93e:	92 fd       	sbrc	r25, 2
 940:	fa cf       	rjmp	.-12     	; 0x936 <Endpoint_WaitUntilReady+0x1a>
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 942:	90 91 00 14 	lds	r25, 0x1400	; 0x801400 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 946:	99 23       	and	r25, r25
 948:	91 f0       	breq	.+36     	; 0x96e <Endpoint_WaitUntilReady+0x52>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 94a:	95 30       	cpi	r25, 0x05	; 5
 94c:	91 f0       	breq	.+36     	; 0x972 <Endpoint_WaitUntilReady+0x56>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 94e:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 952:	95 fd       	sbrc	r25, 5
 954:	10 c0       	rjmp	.+32     	; 0x976 <Endpoint_WaitUntilReady+0x5a>
 956:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 95a:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 95e:	24 17       	cp	r18, r20
 960:	35 07       	cpc	r19, r21
 962:	09 f3       	breq	.-62     	; 0x926 <Endpoint_WaitUntilReady+0xa>
 964:	81 50       	subi	r24, 0x01	; 1
 966:	9a 01       	movw	r18, r20
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 968:	f1 f6       	brne	.-68     	; 0x926 <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
 96a:	84 e0       	ldi	r24, 0x04	; 4
 96c:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 96e:	82 e0       	ldi	r24, 0x02	; 2
 970:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
 972:	83 e0       	ldi	r24, 0x03	; 3
 974:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
 976:	81 e0       	ldi	r24, 0x01	; 1

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
 978:	08 95       	ret

0000097a <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
 97a:	0f 93       	push	r16
 97c:	1f 93       	push	r17
 97e:	cf 93       	push	r28
 980:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 982:	4e d0       	rcall	.+156    	; 0xa20 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
 984:	55 d0       	rcall	.+170    	; 0xa30 <USB_INT_ClearAllInterrupts>
 986:	c8 ed       	ldi	r28, 0xD8	; 216
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 988:	d0 e0       	ldi	r29, 0x00	; 0
 98a:	88 81       	ld	r24, Y
 98c:	8f 77       	andi	r24, 0x7F	; 127
 98e:	88 83       	st	Y, r24
 990:	88 81       	ld	r24, Y
				USBCON |=  (1 << USBE);
 992:	80 68       	ori	r24, 0x80	; 128
 994:	88 83       	st	Y, r24
 996:	88 81       	ld	r24, Y
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 998:	8f 7d       	andi	r24, 0xDF	; 223
 99a:	88 83       	st	Y, r24
 99c:	e7 ed       	ldi	r30, 0xD7	; 215

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
 99e:	f0 e0       	ldi	r31, 0x00	; 0
 9a0:	80 81       	ld	r24, Z
 9a2:	80 68       	ori	r24, 0x80	; 128
 9a4:	80 83       	st	Z, r24
 9a6:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 9a8:	10 92 00 14 	sts	0x1400, r1	; 0x801400 <USB_DeviceState>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 9ac:	10 92 fc 13 	sts	0x13FC, r1	; 0x8013fc <USB_Device_ConfigurationNumber>
	USB_Device_ConfigurationNumber  = 0;
 9b0:	10 92 fe 13 	sts	0x13FE, r1	; 0x8013fe <USB_Device_RemoteWakeupEnabled>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 9b4:	10 92 fd 13 	sts	0x13FD, r1	; 0x8013fd <USB_Device_CurrentlySelfPowered>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 9b8:	00 ee       	ldi	r16, 0xE0	; 224
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
 9ba:	10 e0       	ldi	r17, 0x00	; 0
 9bc:	f8 01       	movw	r30, r16
 9be:	80 81       	ld	r24, Z
 9c0:	8b 7f       	andi	r24, 0xFB	; 251
 9c2:	80 83       	st	Z, r24
 9c4:	88 81       	ld	r24, Y
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
 9c6:	81 60       	ori	r24, 0x01	; 1
 9c8:	88 83       	st	Y, r24
 9ca:	42 e3       	ldi	r20, 0x32	; 50
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 9cc:	60 e0       	ldi	r22, 0x00	; 0
 9ce:	80 e0       	ldi	r24, 0x00	; 0
 9d0:	52 df       	rcall	.-348    	; 0x876 <Endpoint_ConfigureEndpoint_Prv>
 9d2:	e1 ee       	ldi	r30, 0xE1	; 225
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 9d4:	f0 e0       	ldi	r31, 0x00	; 0
 9d6:	80 81       	ld	r24, Z
 9d8:	8e 7f       	andi	r24, 0xFE	; 254
 9da:	80 83       	st	Z, r24
 9dc:	e2 ee       	ldi	r30, 0xE2	; 226
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 9de:	f0 e0       	ldi	r31, 0x00	; 0
 9e0:	80 81       	ld	r24, Z
 9e2:	81 60       	ori	r24, 0x01	; 1
 9e4:	80 83       	st	Z, r24
 9e6:	80 81       	ld	r24, Z
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 9e8:	88 60       	ori	r24, 0x08	; 8
 9ea:	80 83       	st	Z, r24
 9ec:	f8 01       	movw	r30, r16
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 9ee:	80 81       	ld	r24, Z
 9f0:	8e 7f       	andi	r24, 0xFE	; 254
 9f2:	80 83       	st	Z, r24
 9f4:	88 81       	ld	r24, Y

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
 9f6:	80 61       	ori	r24, 0x10	; 16
 9f8:	88 83       	st	Y, r24
 9fa:	df 91       	pop	r29
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 9fc:	cf 91       	pop	r28
 9fe:	1f 91       	pop	r17
 a00:	0f 91       	pop	r16
 a02:	08 95       	ret

00000a04 <USB_Init>:
 a04:	e8 ed       	ldi	r30, 0xD8	; 216
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
 a06:	f0 e0       	ldi	r31, 0x00	; 0
 a08:	80 81       	ld	r24, Z
 a0a:	8f 7e       	andi	r24, 0xEF	; 239
 a0c:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
 a0e:	e7 ed       	ldi	r30, 0xD7	; 215
 a10:	f0 e0       	ldi	r31, 0x00	; 0
 a12:	80 81       	ld	r24, Z
 a14:	81 60       	ori	r24, 0x01	; 1
 a16:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 a18:	81 e0       	ldi	r24, 0x01	; 1
 a1a:	80 93 ff 13 	sts	0x13FF, r24	; 0x8013ff <USB_IsInitialized>

	USB_ResetInterface();
 a1e:	ad cf       	rjmp	.-166    	; 0x97a <USB_ResetInterface>

00000a20 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
 a20:	e8 ed       	ldi	r30, 0xD8	; 216
 a22:	f0 e0       	ldi	r31, 0x00	; 0
 a24:	80 81       	ld	r24, Z
 a26:	8c 7f       	andi	r24, 0xFC	; 252
 a28:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 a2a:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	#endif
}
 a2e:	08 95       	ret

00000a30 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
 a30:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 a34:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#endif
}
 a38:	08 95       	ret

00000a3a <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
 a3a:	1f 92       	push	r1
 a3c:	0f 92       	push	r0
 a3e:	0f b6       	in	r0, 0x3f	; 63
 a40:	0f 92       	push	r0
 a42:	11 24       	eor	r1, r1
 a44:	0b b6       	in	r0, 0x3b	; 59
 a46:	0f 92       	push	r0
 a48:	2f 93       	push	r18
 a4a:	3f 93       	push	r19
 a4c:	4f 93       	push	r20
 a4e:	5f 93       	push	r21
 a50:	6f 93       	push	r22
 a52:	7f 93       	push	r23
 a54:	8f 93       	push	r24
 a56:	9f 93       	push	r25
 a58:	af 93       	push	r26
 a5a:	bf 93       	push	r27
 a5c:	ef 93       	push	r30
 a5e:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 a60:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 a64:	82 ff       	sbrs	r24, 2
 a66:	0a c0       	rjmp	.+20     	; 0xa7c <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 a68:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 a6c:	82 ff       	sbrs	r24, 2
 a6e:	06 c0       	rjmp	.+12     	; 0xa7c <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 a70:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 a74:	8b 7f       	andi	r24, 0xFB	; 251
 a76:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 a7a:	05 d2       	rcall	.+1034   	; 0xe86 <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
 a7c:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
 a80:	80 ff       	sbrs	r24, 0
 a82:	18 c0       	rjmp	.+48     	; 0xab4 <__vector_10+0x7a>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
 a84:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 a88:	80 ff       	sbrs	r24, 0
 a8a:	14 c0       	rjmp	.+40     	; 0xab4 <__vector_10+0x7a>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
 a8c:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
 a90:	8e 7f       	andi	r24, 0xFE	; 254
 a92:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 a96:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
 a9a:	80 ff       	sbrs	r24, 0
 a9c:	8c c0       	rjmp	.+280    	; 0xbb6 <__vector_10+0x17c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 a9e:	84 e1       	ldi	r24, 0x14	; 20
 aa0:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 aa2:	86 e1       	ldi	r24, 0x16	; 22
 aa4:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
 aa6:	09 b4       	in	r0, 0x29	; 41
 aa8:	00 fe       	sbrs	r0, 0
 aaa:	fd cf       	rjmp	.-6      	; 0xaa6 <__vector_10+0x6c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
 aac:	81 e0       	ldi	r24, 0x01	; 1
 aae:	80 93 00 14 	sts	0x1400, r24	; 0x801400 <USB_DeviceState>
			EVENT_USB_Device_Connect();
 ab2:	9e db       	rcall	.-2244   	; 0x1f0 <EVENT_USB_Device_Connect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 ab4:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 ab8:	80 ff       	sbrs	r24, 0
 aba:	18 c0       	rjmp	.+48     	; 0xaec <__vector_10+0xb2>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 abc:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 ac0:	80 ff       	sbrs	r24, 0
 ac2:	14 c0       	rjmp	.+40     	; 0xaec <__vector_10+0xb2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 ac4:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 ac8:	8e 7f       	andi	r24, 0xFE	; 254
 aca:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 ace:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 ad2:	80 61       	ori	r24, 0x10	; 16
 ad4:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
 ad8:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 adc:	80 62       	ori	r24, 0x20	; 32
 ade:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 ae2:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 ae4:	85 e0       	ldi	r24, 0x05	; 5
 ae6:	80 93 00 14 	sts	0x1400, r24	; 0x801400 <USB_DeviceState>
		EVENT_USB_Device_Suspend();
 aea:	cd d1       	rcall	.+922    	; 0xe86 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 aec:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 af0:	84 ff       	sbrs	r24, 4
 af2:	28 c0       	rjmp	.+80     	; 0xb44 <__vector_10+0x10a>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 af4:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 af8:	84 ff       	sbrs	r24, 4
 afa:	24 c0       	rjmp	.+72     	; 0xb44 <__vector_10+0x10a>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 afc:	84 e1       	ldi	r24, 0x14	; 20
 afe:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 b00:	86 e1       	ldi	r24, 0x16	; 22
 b02:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 b04:	09 b4       	in	r0, 0x29	; 41
 b06:	00 fe       	sbrs	r0, 0
 b08:	fd cf       	rjmp	.-6      	; 0xb04 <__vector_10+0xca>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 b0a:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 b0e:	8f 7d       	andi	r24, 0xDF	; 223
 b10:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 b14:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 b18:	8f 7e       	andi	r24, 0xEF	; 239
 b1a:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 b1e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 b22:	8f 7e       	andi	r24, 0xEF	; 239
 b24:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 b28:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 b2c:	81 60       	ori	r24, 0x01	; 1
 b2e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 b32:	80 91 fc 13 	lds	r24, 0x13FC	; 0x8013fc <USB_Device_ConfigurationNumber>
 b36:	88 23       	and	r24, r24
 b38:	09 f4       	brne	.+2      	; 0xb3c <__vector_10+0x102>
 b3a:	42 c0       	rjmp	.+132    	; 0xbc0 <__vector_10+0x186>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
 b3c:	84 e0       	ldi	r24, 0x04	; 4
 b3e:	80 93 00 14 	sts	0x1400, r24	; 0x801400 <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 b42:	a1 d1       	rcall	.+834    	; 0xe86 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 b44:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 b48:	83 ff       	sbrs	r24, 3
 b4a:	22 c0       	rjmp	.+68     	; 0xb90 <__vector_10+0x156>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 b4c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 b50:	83 ff       	sbrs	r24, 3
 b52:	1e c0       	rjmp	.+60     	; 0xb90 <__vector_10+0x156>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 b54:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 b58:	87 7f       	andi	r24, 0xF7	; 247
 b5a:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 b5e:	82 e0       	ldi	r24, 0x02	; 2
 b60:	80 93 00 14 	sts	0x1400, r24	; 0x801400 <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
 b64:	10 92 fc 13 	sts	0x13FC, r1	; 0x8013fc <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 b68:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 b6c:	8e 7f       	andi	r24, 0xFE	; 254
 b6e:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 b72:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 b76:	8e 7f       	andi	r24, 0xFE	; 254
 b78:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 b7c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 b80:	80 61       	ori	r24, 0x10	; 16
 b82:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 b86:	42 e3       	ldi	r20, 0x32	; 50
 b88:	60 e0       	ldi	r22, 0x00	; 0
 b8a:	80 e0       	ldi	r24, 0x00	; 0

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 b8c:	74 de       	rcall	.-792    	; 0x876 <Endpoint_ConfigureEndpoint_Prv>
 b8e:	7b d1       	rcall	.+758    	; 0xe86 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 b90:	ff 91       	pop	r31
 b92:	ef 91       	pop	r30
 b94:	bf 91       	pop	r27
 b96:	af 91       	pop	r26
 b98:	9f 91       	pop	r25
 b9a:	8f 91       	pop	r24
 b9c:	7f 91       	pop	r23
 b9e:	6f 91       	pop	r22
 ba0:	5f 91       	pop	r21
 ba2:	4f 91       	pop	r20
 ba4:	3f 91       	pop	r19
 ba6:	2f 91       	pop	r18
 ba8:	0f 90       	pop	r0
 baa:	0b be       	out	0x3b, r0	; 59
 bac:	0f 90       	pop	r0
 bae:	0f be       	out	0x3f, r0	; 63
 bb0:	0f 90       	pop	r0
 bb2:	1f 90       	pop	r1
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 bb4:	18 95       	reti
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
 bb6:	19 bc       	out	0x29, r1	; 41
 bb8:	10 92 00 14 	sts	0x1400, r1	; 0x801400 <USB_DeviceState>
			EVENT_USB_Device_Disconnect();
 bbc:	1a db       	rcall	.-2508   	; 0x1f2 <EVENT_USB_Device_Disconnect>
 bbe:	7a cf       	rjmp	.-268    	; 0xab4 <__vector_10+0x7a>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 bc0:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
 bc4:	87 fd       	sbrc	r24, 7
 bc6:	02 c0       	rjmp	.+4      	; 0xbcc <__vector_10+0x192>
 bc8:	81 e0       	ldi	r24, 0x01	; 1
 bca:	b9 cf       	rjmp	.-142    	; 0xb3e <__vector_10+0x104>
 bcc:	83 e0       	ldi	r24, 0x03	; 3
 bce:	b7 cf       	rjmp	.-146    	; 0xb3e <__vector_10+0x104>

00000bd0 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 bd0:	1f 93       	push	r17
 bd2:	cf 93       	push	r28
 bd4:	df 93       	push	r29
 bd6:	cd b7       	in	r28, 0x3d	; 61
 bd8:	de b7       	in	r29, 0x3e	; 62
 bda:	aa 97       	sbiw	r28, 0x2a	; 42
 bdc:	0f b6       	in	r0, 0x3f	; 63
 bde:	f8 94       	cli
 be0:	de bf       	out	0x3e, r29	; 62
 be2:	0f be       	out	0x3f, r0	; 63
 be4:	cd bf       	out	0x3d, r28	; 61
 be6:	e1 e0       	ldi	r30, 0x01	; 1
 be8:	f4 e1       	ldi	r31, 0x14	; 20
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 bea:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 bee:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 bf0:	24 e1       	ldi	r18, 0x14	; 20
 bf2:	e9 30       	cpi	r30, 0x09	; 9
 bf4:	f2 07       	cpc	r31, r18
 bf6:	c9 f7       	brne	.-14     	; 0xbea <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 bf8:	e2 db       	rcall	.-2108   	; 0x3be <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 bfa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
 bfe:	83 ff       	sbrs	r24, 3
 c00:	10 c0       	rjmp	.+32     	; 0xc22 <USB_Device_ProcessControlRequest+0x52>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 c02:	80 91 01 14 	lds	r24, 0x1401	; 0x801401 <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
 c06:	90 91 02 14 	lds	r25, 0x1402	; 0x801402 <USB_ControlRequest+0x1>
 c0a:	95 30       	cpi	r25, 0x05	; 5
 c0c:	09 f4       	brne	.+2      	; 0xc10 <USB_Device_ProcessControlRequest+0x40>
 c0e:	d8 c0       	rjmp	.+432    	; 0xdc0 <USB_Device_ProcessControlRequest+0x1f0>
 c10:	00 f5       	brcc	.+64     	; 0xc52 <USB_Device_ProcessControlRequest+0x82>
 c12:	91 30       	cpi	r25, 0x01	; 1
 c14:	09 f4       	brne	.+2      	; 0xc18 <USB_Device_ProcessControlRequest+0x48>
 c16:	8b c0       	rjmp	.+278    	; 0xd2e <USB_Device_ProcessControlRequest+0x15e>
 c18:	08 f4       	brcc	.+2      	; 0xc1c <USB_Device_ProcessControlRequest+0x4c>
 c1a:	61 c0       	rjmp	.+194    	; 0xcde <USB_Device_ProcessControlRequest+0x10e>
 c1c:	93 30       	cpi	r25, 0x03	; 3
 c1e:	09 f4       	brne	.+2      	; 0xc22 <USB_Device_ProcessControlRequest+0x52>
 c20:	86 c0       	rjmp	.+268    	; 0xd2e <USB_Device_ProcessControlRequest+0x15e>
 c22:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 c26:	83 ff       	sbrs	r24, 3
 c28:	0a c0       	rjmp	.+20     	; 0xc3e <USB_Device_ProcessControlRequest+0x6e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c2a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 c2e:	87 7f       	andi	r24, 0xF7	; 247
 c30:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 c34:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 c38:	80 62       	ori	r24, 0x20	; 32
 c3a:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
 c3e:	aa 96       	adiw	r28, 0x2a	; 42
 c40:	0f b6       	in	r0, 0x3f	; 63
 c42:	f8 94       	cli
 c44:	de bf       	out	0x3e, r29	; 62
 c46:	0f be       	out	0x3f, r0	; 63
 c48:	cd bf       	out	0x3d, r28	; 61
 c4a:	df 91       	pop	r29
 c4c:	cf 91       	pop	r28
 c4e:	1f 91       	pop	r17
 c50:	08 95       	ret

	if (Endpoint_IsSETUPReceived())
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;

		switch (USB_ControlRequest.bRequest)
 c52:	98 30       	cpi	r25, 0x08	; 8
 c54:	09 f4       	brne	.+2      	; 0xc58 <USB_Device_ProcessControlRequest+0x88>
 c56:	ec c0       	rjmp	.+472    	; 0xe30 <USB_Device_ProcessControlRequest+0x260>
 c58:	99 30       	cpi	r25, 0x09	; 9
 c5a:	09 f4       	brne	.+2      	; 0xc5e <USB_Device_ProcessControlRequest+0x8e>
 c5c:	f6 c0       	rjmp	.+492    	; 0xe4a <USB_Device_ProcessControlRequest+0x27a>
 c5e:	96 30       	cpi	r25, 0x06	; 6
 c60:	01 f7       	brne	.-64     	; 0xc22 <USB_Device_ProcessControlRequest+0x52>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 c62:	80 58       	subi	r24, 0x80	; 128
 c64:	82 30       	cpi	r24, 0x02	; 2
 c66:	e8 f6       	brcc	.-70     	; 0xc22 <USB_Device_ProcessControlRequest+0x52>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 c68:	80 91 03 14 	lds	r24, 0x1403	; 0x801403 <USB_ControlRequest+0x2>
 c6c:	90 91 04 14 	lds	r25, 0x1404	; 0x801404 <USB_ControlRequest+0x3>
 c70:	8c 3d       	cpi	r24, 0xDC	; 220
 c72:	23 e0       	ldi	r18, 0x03	; 3
 c74:	92 07       	cpc	r25, r18
 c76:	09 f0       	breq	.+2      	; 0xc7a <USB_Device_ProcessControlRequest+0xaa>
 c78:	c6 c0       	rjmp	.+396    	; 0xe06 <USB_Device_ProcessControlRequest+0x236>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 c7a:	83 e0       	ldi	r24, 0x03	; 3
 c7c:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 c7e:	8a e2       	ldi	r24, 0x2A	; 42
 c80:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 c82:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 c84:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 c86:	de 01       	movw	r26, r28
 c88:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 c8a:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 c8c:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 c8e:	51 e2       	ldi	r21, 0x21	; 33
 c90:	e3 2f       	mov	r30, r19
 c92:	f0 e0       	ldi	r31, 0x00	; 0
 c94:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
 c98:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
 c9a:	20 ff       	sbrs	r18, 0
 c9c:	03 c0       	rjmp	.+6      	; 0xca4 <USB_Device_ProcessControlRequest+0xd4>
					{
						SerialByte >>= 4;
 c9e:	e2 95       	swap	r30
 ca0:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
 ca2:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
 ca4:	ef 70       	andi	r30, 0x0F	; 15
 ca6:	8e 2f       	mov	r24, r30
 ca8:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 caa:	ea 30       	cpi	r30, 0x0A	; 10
 cac:	08 f4       	brcc	.+2      	; 0xcb0 <USB_Device_ProcessControlRequest+0xe0>
 cae:	a9 c0       	rjmp	.+338    	; 0xe02 <USB_Device_ProcessControlRequest+0x232>
 cb0:	c7 96       	adiw	r24, 0x37	; 55
 cb2:	8d 93       	st	X+, r24
 cb4:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 cb6:	2f 5f       	subi	r18, 0xFF	; 255
 cb8:	24 31       	cpi	r18, 0x14	; 20
 cba:	51 f7       	brne	.-44     	; 0xc90 <USB_Device_ProcessControlRequest+0xc0>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 cbc:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 cbe:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 cc2:	87 7f       	andi	r24, 0xF7	; 247
 cc4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 cc8:	6a e2       	ldi	r22, 0x2A	; 42
 cca:	70 e0       	ldi	r23, 0x00	; 0
 ccc:	ce 01       	movw	r24, r28
 cce:	01 96       	adiw	r24, 0x01	; 1
 cd0:	de dc       	rcall	.-1604   	; 0x68e <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 cd2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 cd6:	8b 77       	andi	r24, 0x7B	; 123
 cd8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 cdc:	a2 cf       	rjmp	.-188    	; 0xc22 <USB_Device_ProcessControlRequest+0x52>
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;

		switch (USB_ControlRequest.bRequest)
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 cde:	80 38       	cpi	r24, 0x80	; 128
 ce0:	99 f0       	breq	.+38     	; 0xd08 <USB_Device_ProcessControlRequest+0x138>
 ce2:	82 38       	cpi	r24, 0x82	; 130
 ce4:	09 f0       	breq	.+2      	; 0xce8 <USB_Device_ProcessControlRequest+0x118>
 ce6:	9d cf       	rjmp	.-198    	; 0xc22 <USB_Device_ProcessControlRequest+0x52>
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 ce8:	80 91 05 14 	lds	r24, 0x1405	; 0x801405 <USB_ControlRequest+0x4>
 cec:	8f 70       	andi	r24, 0x0F	; 15

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
 cee:	87 30       	cpi	r24, 0x07	; 7
 cf0:	08 f0       	brcs	.+2      	; 0xcf4 <USB_Device_ProcessControlRequest+0x124>
 cf2:	97 cf       	rjmp	.-210    	; 0xc22 <USB_Device_ProcessControlRequest+0x52>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 cf4:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 cf8:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 cfc:	85 fb       	bst	r24, 5
 cfe:	88 27       	eor	r24, r24
 d00:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 d02:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 d06:	06 c0       	rjmp	.+12     	; 0xd14 <USB_Device_ProcessControlRequest+0x144>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 d08:	80 91 fd 13 	lds	r24, 0x13FD	; 0x8013fd <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 d0c:	90 91 fe 13 	lds	r25, 0x13FE	; 0x8013fe <USB_Device_RemoteWakeupEnabled>
 d10:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 d12:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 d14:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 d18:	97 7f       	andi	r25, 0xF7	; 247
 d1a:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 d1e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
 d22:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 d26:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 d2a:	8e 77       	andi	r24, 0x7E	; 126
 d2c:	32 c0       	rjmp	.+100    	; 0xd92 <USB_Device_ProcessControlRequest+0x1c2>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 d2e:	28 2f       	mov	r18, r24
 d30:	2d 7f       	andi	r18, 0xFD	; 253
 d32:	09 f0       	breq	.+2      	; 0xd36 <USB_Device_ProcessControlRequest+0x166>
 d34:	76 cf       	rjmp	.-276    	; 0xc22 <USB_Device_ProcessControlRequest+0x52>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 d36:	88 23       	and	r24, r24
 d38:	e9 f0       	breq	.+58     	; 0xd74 <USB_Device_ProcessControlRequest+0x1a4>
 d3a:	82 30       	cpi	r24, 0x02	; 2
 d3c:	09 f0       	breq	.+2      	; 0xd40 <USB_Device_ProcessControlRequest+0x170>
 d3e:	71 cf       	rjmp	.-286    	; 0xc22 <USB_Device_ProcessControlRequest+0x52>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 d40:	80 91 03 14 	lds	r24, 0x1403	; 0x801403 <USB_ControlRequest+0x2>
 d44:	81 11       	cpse	r24, r1
 d46:	20 c0       	rjmp	.+64     	; 0xd88 <USB_Device_ProcessControlRequest+0x1b8>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 d48:	80 91 05 14 	lds	r24, 0x1405	; 0x801405 <USB_ControlRequest+0x4>
 d4c:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
 d4e:	2f ef       	ldi	r18, 0xFF	; 255
 d50:	28 0f       	add	r18, r24
 d52:	26 30       	cpi	r18, 0x06	; 6
 d54:	08 f0       	brcs	.+2      	; 0xd58 <USB_Device_ProcessControlRequest+0x188>
 d56:	65 cf       	rjmp	.-310    	; 0xc22 <USB_Device_ProcessControlRequest+0x52>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 d58:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 d5c:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 d60:	20 ff       	sbrs	r18, 0
 d62:	12 c0       	rjmp	.+36     	; 0xd88 <USB_Device_ProcessControlRequest+0x1b8>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 d64:	93 30       	cpi	r25, 0x03	; 3
 d66:	c9 f4       	brne	.+50     	; 0xd9a <USB_Device_ProcessControlRequest+0x1ca>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 d68:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 d6c:	80 62       	ori	r24, 0x20	; 32

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 d6e:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 d72:	0a c0       	rjmp	.+20     	; 0xd88 <USB_Device_ProcessControlRequest+0x1b8>
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 d74:	80 91 03 14 	lds	r24, 0x1403	; 0x801403 <USB_ControlRequest+0x2>
 d78:	81 30       	cpi	r24, 0x01	; 1
 d7a:	09 f0       	breq	.+2      	; 0xd7e <USB_Device_ProcessControlRequest+0x1ae>
 d7c:	52 cf       	rjmp	.-348    	; 0xc22 <USB_Device_ProcessControlRequest+0x52>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 d7e:	93 30       	cpi	r25, 0x03	; 3
 d80:	09 f0       	breq	.+2      	; 0xd84 <USB_Device_ProcessControlRequest+0x1b4>
 d82:	80 e0       	ldi	r24, 0x00	; 0
 d84:	80 93 fe 13 	sts	0x13FE, r24	; 0x8013fe <USB_Device_RemoteWakeupEnabled>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 d88:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 d8c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 d90:	87 7f       	andi	r24, 0xF7	; 247
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 d92:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 d96:	a3 dd       	rcall	.-1210   	; 0x8de <Endpoint_ClearStatusStage>
 d98:	44 cf       	rjmp	.-376    	; 0xc22 <USB_Device_ProcessControlRequest+0x52>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 d9a:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 d9e:	90 61       	ori	r25, 0x10	; 16
 da0:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 da4:	21 e0       	ldi	r18, 0x01	; 1
 da6:	30 e0       	ldi	r19, 0x00	; 0
 da8:	01 c0       	rjmp	.+2      	; 0xdac <USB_Device_ProcessControlRequest+0x1dc>
 daa:	22 0f       	add	r18, r18
 dac:	8a 95       	dec	r24
 dae:	ea f7       	brpl	.-6      	; 0xdaa <USB_Device_ProcessControlRequest+0x1da>
 db0:	20 93 ea 00 	sts	0x00EA, r18	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
 db4:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 db8:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 dbc:	88 60       	ori	r24, 0x08	; 8
 dbe:	d7 cf       	rjmp	.-82     	; 0xd6e <USB_Device_ProcessControlRequest+0x19e>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 dc0:	81 11       	cpse	r24, r1
 dc2:	2f cf       	rjmp	.-418    	; 0xc22 <USB_Device_ProcessControlRequest+0x52>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 dc4:	10 91 03 14 	lds	r17, 0x1403	; 0x801403 <USB_ControlRequest+0x2>
 dc8:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 dca:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
 dce:	80 78       	andi	r24, 0x80	; 128
 dd0:	81 2b       	or	r24, r17
 dd2:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 dd6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 dda:	87 7f       	andi	r24, 0xF7	; 247
 ddc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 de0:	7e dd       	rcall	.-1284   	; 0x8de <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 de2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	while (!(Endpoint_IsINReady()));
 de6:	80 ff       	sbrs	r24, 0
 de8:	fc cf       	rjmp	.-8      	; 0xde2 <USB_Device_ProcessControlRequest+0x212>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
 dea:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
 dee:	80 68       	ori	r24, 0x80	; 128
 df0:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 df4:	83 e0       	ldi	r24, 0x03	; 3
 df6:	11 11       	cpse	r17, r1
 df8:	01 c0       	rjmp	.+2      	; 0xdfc <USB_Device_ProcessControlRequest+0x22c>
 dfa:	82 e0       	ldi	r24, 0x02	; 2
 dfc:	80 93 00 14 	sts	0x1400, r24	; 0x801400 <USB_DeviceState>
 e00:	10 cf       	rjmp	.-480    	; 0xc22 <USB_Device_ProcessControlRequest+0x52>
						SigReadAddress++;
					}

					SerialByte &= 0x0F;

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 e02:	c0 96       	adiw	r24, 0x30	; 48
 e04:	56 cf       	rjmp	.-340    	; 0xcb2 <USB_Device_ProcessControlRequest+0xe2>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 e06:	60 91 05 14 	lds	r22, 0x1405	; 0x801405 <USB_ControlRequest+0x4>
 e0a:	70 91 06 14 	lds	r23, 0x1406	; 0x801406 <USB_ControlRequest+0x5>
 e0e:	ae 01       	movw	r20, r28
 e10:	4f 5f       	subi	r20, 0xFF	; 255
 e12:	5f 4f       	sbci	r21, 0xFF	; 255
 e14:	5f db       	rcall	.-2370   	; 0x4d4 <CALLBACK_USB_GetDescriptor>
 e16:	bc 01       	movw	r22, r24
 e18:	89 2b       	or	r24, r25
 e1a:	09 f4       	brne	.+2      	; 0xe1e <USB_Device_ProcessControlRequest+0x24e>
 e1c:	02 cf       	rjmp	.-508    	; 0xc22 <USB_Device_ProcessControlRequest+0x52>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 e1e:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 e22:	97 7f       	andi	r25, 0xF7	; 247
 e24:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 e28:	89 81       	ldd	r24, Y+1	; 0x01
 e2a:	9a 81       	ldd	r25, Y+2	; 0x02
 e2c:	c6 dc       	rcall	.-1652   	; 0x7ba <Endpoint_Write_Control_PStream_LE>
 e2e:	51 cf       	rjmp	.-350    	; 0xcd2 <USB_Device_ProcessControlRequest+0x102>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 e30:	80 38       	cpi	r24, 0x80	; 128
 e32:	09 f0       	breq	.+2      	; 0xe36 <USB_Device_ProcessControlRequest+0x266>
 e34:	f6 ce       	rjmp	.-532    	; 0xc22 <USB_Device_ProcessControlRequest+0x52>
 e36:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 e3a:	87 7f       	andi	r24, 0xF7	; 247
 e3c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 e40:	80 91 fc 13 	lds	r24, 0x13FC	; 0x8013fc <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 e44:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 e48:	6e cf       	rjmp	.-292    	; 0xd26 <USB_Device_ProcessControlRequest+0x156>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 e4a:	81 11       	cpse	r24, r1
 e4c:	ea ce       	rjmp	.-556    	; 0xc22 <USB_Device_ProcessControlRequest+0x52>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 e4e:	90 91 03 14 	lds	r25, 0x1403	; 0x801403 <USB_ControlRequest+0x2>
 e52:	92 30       	cpi	r25, 0x02	; 2
 e54:	08 f0       	brcs	.+2      	; 0xe58 <USB_Device_ProcessControlRequest+0x288>
 e56:	e5 ce       	rjmp	.-566    	; 0xc22 <USB_Device_ProcessControlRequest+0x52>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 e58:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 e5c:	87 7f       	andi	r24, 0xF7	; 247
 e5e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 e62:	90 93 fc 13 	sts	0x13FC, r25	; 0x8013fc <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
 e66:	3b dd       	rcall	.-1418   	; 0x8de <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
 e68:	80 91 fc 13 	lds	r24, 0x13FC	; 0x8013fc <USB_Device_ConfigurationNumber>
 e6c:	88 23       	and	r24, r24
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 e6e:	29 f0       	breq	.+10     	; 0xe7a <USB_Device_ProcessControlRequest+0x2aa>
 e70:	84 e0       	ldi	r24, 0x04	; 4
 e72:	80 93 00 14 	sts	0x1400, r24	; 0x801400 <USB_DeviceState>

	EVENT_USB_Device_ConfigurationChanged();
 e76:	be d9       	rcall	.-3204   	; 0x1f4 <EVENT_USB_Device_ConfigurationChanged>
 e78:	d4 ce       	rjmp	.-600    	; 0xc22 <USB_Device_ProcessControlRequest+0x52>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 e7a:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	Endpoint_ClearStatusStage();

	if (USB_Device_ConfigurationNumber)
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 e7e:	87 fd       	sbrc	r24, 7
 e80:	f7 cf       	rjmp	.-18     	; 0xe70 <USB_Device_ProcessControlRequest+0x2a0>
 e82:	81 e0       	ldi	r24, 0x01	; 1
 e84:	f6 cf       	rjmp	.-20     	; 0xe72 <USB_Device_ProcessControlRequest+0x2a2>

00000e86 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
 e86:	08 95       	ret

00000e88 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 e88:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
 e8a:	80 91 00 14 	lds	r24, 0x1400	; 0x801400 <USB_DeviceState>
 e8e:	88 23       	and	r24, r24
 e90:	91 f0       	breq	.+36     	; 0xeb6 <USB_USBTask+0x2e>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 e92:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 e96:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 e98:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 e9c:	80 fd       	sbrc	r24, 0
 e9e:	0d c0       	rjmp	.+26     	; 0xeba <USB_USBTask+0x32>
 ea0:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 ea2:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 ea4:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 ea8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
 eac:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
 eae:	90 de       	rcall	.-736    	; 0xbd0 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 eb0:	cf 70       	andi	r28, 0x0F	; 15
 eb2:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
 eb6:	cf 91       	pop	r28
 eb8:	08 95       	ret
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 eba:	80 e8       	ldi	r24, 0x80	; 128
 ebc:	f2 cf       	rjmp	.-28     	; 0xea2 <USB_USBTask+0x1a>

00000ebe <__divmodhi4>:
 ebe:	97 fb       	bst	r25, 7
 ec0:	07 2e       	mov	r0, r23
 ec2:	16 f4       	brtc	.+4      	; 0xec8 <__divmodhi4+0xa>
 ec4:	00 94       	com	r0
 ec6:	06 d0       	rcall	.+12     	; 0xed4 <__divmodhi4_neg1>
 ec8:	77 fd       	sbrc	r23, 7
 eca:	08 d0       	rcall	.+16     	; 0xedc <__divmodhi4_neg2>
 ecc:	0b d0       	rcall	.+22     	; 0xee4 <__udivmodhi4>
 ece:	07 fc       	sbrc	r0, 7
 ed0:	05 d0       	rcall	.+10     	; 0xedc <__divmodhi4_neg2>
 ed2:	3e f4       	brtc	.+14     	; 0xee2 <__divmodhi4_exit>

00000ed4 <__divmodhi4_neg1>:
 ed4:	90 95       	com	r25
 ed6:	81 95       	neg	r24
 ed8:	9f 4f       	sbci	r25, 0xFF	; 255
 eda:	08 95       	ret

00000edc <__divmodhi4_neg2>:
 edc:	70 95       	com	r23
 ede:	61 95       	neg	r22
 ee0:	7f 4f       	sbci	r23, 0xFF	; 255

00000ee2 <__divmodhi4_exit>:
 ee2:	08 95       	ret

00000ee4 <__udivmodhi4>:
 ee4:	aa 1b       	sub	r26, r26
 ee6:	bb 1b       	sub	r27, r27
 ee8:	51 e1       	ldi	r21, 0x11	; 17
 eea:	07 c0       	rjmp	.+14     	; 0xefa <__udivmodhi4_ep>

00000eec <__udivmodhi4_loop>:
 eec:	aa 1f       	adc	r26, r26
 eee:	bb 1f       	adc	r27, r27
 ef0:	a6 17       	cp	r26, r22
 ef2:	b7 07       	cpc	r27, r23
 ef4:	10 f0       	brcs	.+4      	; 0xefa <__udivmodhi4_ep>
 ef6:	a6 1b       	sub	r26, r22
 ef8:	b7 0b       	sbc	r27, r23

00000efa <__udivmodhi4_ep>:
 efa:	88 1f       	adc	r24, r24
 efc:	99 1f       	adc	r25, r25
 efe:	5a 95       	dec	r21
 f00:	a9 f7       	brne	.-22     	; 0xeec <__udivmodhi4_loop>
 f02:	80 95       	com	r24
 f04:	90 95       	com	r25
 f06:	bc 01       	movw	r22, r24
 f08:	cd 01       	movw	r24, r26
 f0a:	08 95       	ret

00000f0c <_exit>:
 f0c:	f8 94       	cli

00000f0e <__stop_program>:
 f0e:	ff cf       	rjmp	.-2      	; 0xf0e <__stop_program>
